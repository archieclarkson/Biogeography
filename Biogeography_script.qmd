---
title: "Chapter 2: Biogeography of microeukaryotes in anoxic and hypersaline polar freshwater"
format: html
editor: visual
code-fold: true
---

### Notes/unused script

```{r}
#Identify ASVs with confidence â‰¤ 0.97
#low_confidence_indices<-which(as.numeric(PRJNA329332_V4_taxonomy_df$Confidence)<=0.97)
#Replace taxonomic assignments with "Unidentified" for those ASVs
#taxonomy_columns<-setdiff(colnames(PRJNA329332_V4_taxonomy_df),"Confidence")
#PRJNA329332_V4_taxonomy_df[low_confidence_indices,taxonomy_columns]<-"Unidentified"
#Convert to matrix for phyloseq compatibility
#PRJNA329332_V4_taxonomy_97<-as.matrix(PRJNA329332_V4_taxonomy_df)
#Count number of unidentified sequences...
```

## Set working directory

```{r}
#Set working directory
setwd("C:/Users/ac1552/OneDrive - Natural History Museum/Documents/PhD/Biogeography/R/Biogeography")
```

## Installing and loading packages

```{r}
#Load libraries
#install.packages("ggplot2")
require(ggplot2)
#install.packages("ggforce")
require(ggforce)
#install.packages("ggtree")
require(ggtree)
#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#if(!requireNamespace("BiocManager")){
#  install.packages("BiocManager")
#BiocManager::install("phyloseq",force=T)
#BiocManager::install("XVector")
#BiocManager::install("UCSC.utils")
require(phyloseq)
require(tidyr)
#install.packages("forcats")
require(forcats)
require(plyr)
require(dplyr)
#for rownames_to_column() function
require(tibble)
#for write_tsv() function
require(readr)
#BiocManager::install("microbiome")
require(microbiome)
#install.packages("vegan")
require(vegan)
#install.packages("labdsv")
require(labdsv)
#install.packages("devtools")
#devtools::install_github("jiho/chroma")
require(chroma)
#install.packages("RColorBrewer")
require(RColorBrewer)
#install.packages("flextable")
require(flextable)
#install.packages("lme4")
#install.packages("lmtest")
require(lme4)
require(lmtest)
require(stringr)
require(grid)
require(scales)
require(gridExtra)
#install.packages("FSA")
require(FSA)
#install.packages("phytools")
require(phytools)
#install.packages("devtools")
#devtools::install_github("jfq3/QsRutils", build_vignettes = TRUE)
require(QsRutils)
#install.packages("ggrepel")
require(ggrepel)
#install.packages("Polychrome")
require(Polychrome)
#install.packages("remotes")
#BiocManager::install("ggtreeExtra")
require(ggtreeExtra)
#install.packages("ggnewscale")
require(ggnewscale)
# Install if not already installed
#install.packages("ggstar")
# Load the library
require(ggstar)
#install.packages("indicspecies")
require(indicspecies)
#install.packages("ape")
require(ape)
```

## Set functions

```{r}
#Functions
#Prune 0 abundance records and samples from a PhyloSeq object
prune_ps<-function(ps){
  ps<-prune_samples(sample_sums(ps)>0,ps)
  ps<-prune_taxa(taxa_sums(ps)>0,ps)
  return(ps)
}

#Prune 0 abundance records from dataframe 
prune_0<-function(df){
  df<-df%>%filter(df$Abundance>0)
}

#18S Processing function
#PhyloSeq object input and glom mode
process_ps_18S<-function(ps,glom="tip",transformation="none",remove_na=T){
  #Remove 0 count taxa from PhyloSeq object
  ps<-prune_ps(ps)
  #If division agglomeration requested, otherwise do tipglom
  if(remove_na==F){
      if(glom=="Domain"){
      ps<-tax_glom(ps,taxrank="Domain",NArm=F)
    } else if(glom=="Supergroup"){
      ps<-tax_glom(ps,taxrank="Supergroup",NArm=F)
    } else if(glom=="Division"){
      ps<-tax_glom(ps,taxrank="Division",NArm=F)
    } else if(glom=="Subdivision"){
      ps<-tax_glom(ps,taxrank="Subdivision",NArm=F)
    } else if(glom=="Class"){
      ps<-tax_glom(ps,taxrank="Class",NArm=F)
    } else if(glom=="Order"){
      ps<-tax_glom(ps,taxrank="Order",NArm=F)
    } else if(glom=="Family"){
      ps<-tax_glom(ps,taxrank="Family",NArm=F)
    } else if(glom=="Genus"){
      ps<-tax_glom(ps,taxrank="Genus",NArm=F)
    } else if(glom=="Species"){
      ps<-tax_glom(ps,taxrank="Species",NArm=F)
    } else if(glom=="tip"){
      ps<-tip_glom(ps,h=0.001)
    }
  }
  else if(remove_na==T){
      if(glom=="Domain"){
      ps<-tax_glom(ps,taxrank="Domain")
    } else if(glom=="Supergroup"){
      ps<-tax_glom(ps,taxrank="Supergroup")
    } else if(glom=="Division"){
      ps<-tax_glom(ps,taxrank="Division")
    } else if(glom=="Subdivision"){
      ps<-tax_glom(ps,taxrank="Subdivision")
    } else if(glom=="Class"){
      ps<-tax_glom(ps,taxrank="Class")
    } else if(glom=="Order"){
      ps<-tax_glom(ps,taxrank="Order")
    } else if(glom=="Family"){
      ps<-tax_glom(ps,taxrank="Family")
    } else if(glom=="Genus"){
      ps<-tax_glom(ps,taxrank="Genus")
    } else if(glom=="Species"){
      ps<-tax_glom(ps,taxrank="Species")
    } else if(glom=="tip"){
      ps<-tip_glom(ps,h=0.01)
    }
  }
    #0.2 is the default value, 0.01 is the value which still retained quite a lot of info
  #If transformation is comp, then if pa, otherwise nothing
  if(transformation=="comp"){
    ps<-microbiome::transform(ps,"compositional")
  } else if(transformation=="pa"){
    ps<-microbiome::transform(ps,"pa")
  } else if(transformation=="none"){
    ps
  }
  return(ps)
}

#Theme function
theme_mine <- function(base_size=12,base_family="") {
  # Starts with theme_grey and then modify some parts
  theme_bw(base_size=base_size,base_family=base_family,
           base_line_size=base_size/24,base_rect_size=base_size/24)%+replace%
    theme(
      strip.background = element_blank(),
      strip.text.x = element_text(size = 18),
      strip.text.y = element_text(size = 18),
      axis.text.x = element_text(size=14),
      axis.text.y = element_text(size=14,hjust=1),
      axis.ticks =  element_line(colour = "black"), 
      axis.title.x= element_text(size=16),
      axis.title.y= element_text(size=16,angle=90),
      #legend.position = "none", 
      panel.background = element_blank(), 
      panel.border =element_blank(), 
      #panel.grid.major = element_blank(), 
      #panel.grid.minor = element_blank(), 
      panel.margin = unit(1.0, "lines"), 
      plot.background = element_blank(), 
      plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
      axis.line = element_line(colour = "black")
    )
}

#Bubble theme
theme_bubble <- function(base_size=12,base_family="") {
  # Starts with theme_grey and then modify some parts
  theme_bw(base_size=base_size,base_family=base_family,
           base_line_size=base_size/24,base_rect_size=base_size/24)%+replace%
    theme(
      strip.background = element_blank(),
      strip.text.x = element_text(size = 18),
      strip.text.y = element_text(size = 18),
      axis.text.x = element_text(size=14,angle=90),
      axis.text.y = element_text(size=14,hjust=1),
      axis.ticks =  element_line(colour = "black"), 
      axis.title.x= element_text(size=16),
      axis.title.y= element_text(size=16,angle=90),
      #legend.position = "none", 
      panel.background = element_blank(), 
      panel.border =element_blank(), 
      #panel.grid.major = element_blank(), 
      #panel.grid.minor = element_blank(), 
      panel.margin = unit(1.0, "lines"), 
      plot.background = element_blank(), 
      plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
      axis.line = element_line(colour = "black")
    )
}

remove_phyloseq_tree <- function(ps) {
  phyloseq::phyloseq(
    otu_table(ps),
    tax_table(ps),
    sample_data(ps)
  )
}
```

## Importing PRJNAs as separate phyloseq objects

### First: V4 datasets

### PRJNA329332

```{r}
#Read in OTU table
PRJNA329332_V4_otu_table=read.csv("data/PRJNA329332/V4_18S_PRJNA329332_table.csv",sep=",",row.names=1,na.strings="")
PRJNA329332_V4_otu_table=as.matrix(PRJNA329332_V4_otu_table)

#Read in taxonomy
PRJNA329332_V4_taxonomy=read.csv("data/PRJNA329332/V4_18S-PRJNA329332-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
PRJNA329332_V4_taxonomy_df<-as.data.frame(PRJNA329332_V4_taxonomy)
#Filter out low confidence assignments
PRJNA329332_V4_taxonomy_97_df<-PRJNA329332_V4_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
PRJNA329332_V4_taxonomy_97=as.matrix(PRJNA329332_V4_taxonomy_97_df)

#Read in metadata
#V9_18S
PRJNA329332_V4_metadata=read.csv("data/PRJNA329332/V4_18S_PRJNA329332_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_PRJNA329332_V4=otu_table(PRJNA329332_V4_otu_table,taxa_are_rows=TRUE)
TAX_PRJNA329332_V4=tax_table(PRJNA329332_V4_taxonomy_97)
META_PRJNA329332_V4=sample_data(PRJNA329332_V4_metadata)

#Check sample names are identical and same order
sample_names(OTU_PRJNA329332_V4)
sample_names(META_PRJNA329332_V4)

#Merge into one PhyloSeq object
ps_PRJNA329332_V4=phyloseq(OTU_PRJNA329332_V4,TAX_PRJNA329332_V4,META_PRJNA329332_V4)
ps_PRJNA329332_V4

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_PRJNA329332_V4)[!is.na(tax_table(ps_PRJNA329332_V4)[,"Supergroup"])]
ps_PRJNA329332_V4<-prune_taxa(keep_taxa,ps_PRJNA329332_V4)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"PRJNA329332_"
old_names<-taxa_names(ps_PRJNA329332_V4)
new_names<-paste0(prefix,old_names)
taxa_names(ps_PRJNA329332_V4)<-new_names
otu_table(ps_PRJNA329332_V4)<-otu_table(ps_PRJNA329332_V4)[new_names,]
tax_table(ps_PRJNA329332_V4)<-tax_table(ps_PRJNA329332_V4)[new_names,]
```

### PRJNA803180

```{r}
#Read in OTU table
PRJNA803180_V4_otu_table=read.csv("data/PRJNA803180/V4_18S_PRJNA803180_table.csv",sep=",",row.names=1,na.strings="")
PRJNA803180_V4_otu_table=as.matrix(PRJNA803180_V4_otu_table)

#Read in taxonomy
PRJNA803180_V4_taxonomy=read.csv("data/PRJNA803180/V4_18S-PRJNA803180-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
PRJNA803180_V4_taxonomy_df<-as.data.frame(PRJNA803180_V4_taxonomy)
#Filter out low confidence assignments
PRJNA803180_V4_taxonomy_97_df<-PRJNA803180_V4_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
PRJNA803180_V4_taxonomy_97=as.matrix(PRJNA803180_V4_taxonomy_97_df)

#Read in metadata
#V9_18S
PRJNA803180_V4_metadata=read.csv("data/PRJNA803180/V4_18S_PRJNA803180_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_PRJNA803180_V4=otu_table(PRJNA803180_V4_otu_table,taxa_are_rows=TRUE)
TAX_PRJNA803180_V4=tax_table(PRJNA803180_V4_taxonomy_97)
META_PRJNA803180_V4=sample_data(PRJNA803180_V4_metadata)

#Check sample names are identical and same order
sample_names(OTU_PRJNA803180_V4)
sample_names(META_PRJNA803180_V4)

#Merge into one PhyloSeq object
ps_PRJNA803180_V4=phyloseq(OTU_PRJNA803180_V4,TAX_PRJNA803180_V4,META_PRJNA803180_V4)
ps_PRJNA803180_V4

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_PRJNA803180_V4)[!is.na(tax_table(ps_PRJNA803180_V4)[,"Supergroup"])]
ps_PRJNA803180_V4<-prune_taxa(keep_taxa,ps_PRJNA803180_V4)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"PRJNA803180_"
old_names<-taxa_names(ps_PRJNA803180_V4)
new_names<-paste0(prefix,old_names)
taxa_names(ps_PRJNA803180_V4)<-new_names
otu_table(ps_PRJNA803180_V4)<-otu_table(ps_PRJNA803180_V4)[new_names,]
tax_table(ps_PRJNA803180_V4)<-tax_table(ps_PRJNA803180_V4)[new_names,]
```

### PRJNA805287

```{r}
#Read in OTU table
PRJNA805287_V4_otu_table=read.csv("data/PRJNA805287/V4_18S_PRJNA805287_table.csv",sep=",",row.names=1,na.strings="")
PRJNA805287_V4_otu_table=as.matrix(PRJNA805287_V4_otu_table)

#Read in taxonomy
PRJNA805287_V4_taxonomy=read.csv("data/PRJNA805287/V4_18S-PRJNA805287-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
PRJNA805287_V4_taxonomy_df<-as.data.frame(PRJNA805287_V4_taxonomy)
#Filter out low confidence assignments
PRJNA805287_V4_taxonomy_97_df<-PRJNA805287_V4_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
PRJNA805287_V4_taxonomy_97=as.matrix(PRJNA805287_V4_taxonomy_97_df)

#Read in metadata
#V9_18S
PRJNA805287_V4_metadata=read.csv("data/PRJNA805287/V4_18S_PRJNA805287_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_PRJNA805287_V4=otu_table(PRJNA805287_V4_otu_table,taxa_are_rows=TRUE)
TAX_PRJNA805287_V4=tax_table(PRJNA805287_V4_taxonomy_97)
META_PRJNA805287_V4=sample_data(PRJNA805287_V4_metadata)

#Check sample names are identical and same order
sample_names(OTU_PRJNA805287_V4)
sample_names(META_PRJNA805287_V4)

#Merge into one PhyloSeq object
ps_PRJNA805287_V4=phyloseq(OTU_PRJNA805287_V4,TAX_PRJNA805287_V4,META_PRJNA805287_V4)
ps_PRJNA805287_V4

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_PRJNA805287_V4)[!is.na(tax_table(ps_PRJNA805287_V4)[,"Supergroup"])]
ps_PRJNA805287_V4<-prune_taxa(keep_taxa,ps_PRJNA805287_V4)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"PRJNA805287_"
old_names<-taxa_names(ps_PRJNA805287_V4)
new_names<-paste0(prefix,old_names)
taxa_names(ps_PRJNA805287_V4)<-new_names
otu_table(ps_PRJNA805287_V4)<-otu_table(ps_PRJNA805287_V4)[new_names,]
tax_table(ps_PRJNA805287_V4)<-tax_table(ps_PRJNA805287_V4)[new_names,]
```

### PRJNA838732

```{r}
#Read in OTU table
PRJNA838732_V4_otu_table=read.csv("data/PRJNA838732/V4_18S_PRJNA838732_table.csv",sep=",",row.names=1,na.strings="")
PRJNA838732_V4_otu_table=as.matrix(PRJNA838732_V4_otu_table)

#Read in taxonomy
PRJNA838732_V4_taxonomy=read.csv("data/PRJNA838732/V4_18S-PRJNA838732-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
PRJNA838732_V4_taxonomy_df<-as.data.frame(PRJNA838732_V4_taxonomy)
#Filter out low confidence assignments
PRJNA838732_V4_taxonomy_97_df<-PRJNA838732_V4_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
PRJNA838732_V4_taxonomy_97=as.matrix(PRJNA838732_V4_taxonomy_97_df)

#Read in metadata
#V9_18S
PRJNA838732_V4_metadata=read.csv("data/PRJNA838732/V4_18S_PRJNA838732_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_PRJNA838732_V4=otu_table(PRJNA838732_V4_otu_table,taxa_are_rows=TRUE)
TAX_PRJNA838732_V4=tax_table(PRJNA838732_V4_taxonomy_97)
META_PRJNA838732_V4=sample_data(PRJNA838732_V4_metadata)

#Check sample names are identical and same order
sample_names(OTU_PRJNA838732_V4)
sample_names(META_PRJNA838732_V4)

#Merge into one PhyloSeq object
ps_PRJNA838732_V4=phyloseq(OTU_PRJNA838732_V4,TAX_PRJNA838732_V4,META_PRJNA838732_V4)
ps_PRJNA838732_V4

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_PRJNA838732_V4)[!is.na(tax_table(ps_PRJNA838732_V4)[,"Supergroup"])]
ps_PRJNA838732_V4<-prune_taxa(keep_taxa,ps_PRJNA838732_V4)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"PRJNA838732_"
old_names<-taxa_names(ps_PRJNA838732_V4)
new_names<-paste0(prefix,old_names)
taxa_names(ps_PRJNA838732_V4)<-new_names
otu_table(ps_PRJNA838732_V4)<-otu_table(ps_PRJNA838732_V4)[new_names,]
tax_table(ps_PRJNA838732_V4)<-tax_table(ps_PRJNA838732_V4)[new_names,]
```

### Next, V9 datasets

### MSc_Bonney_East

```{r}
#Read in OTU table
MSc_Bonney_East_V9_otu_table=read.csv("data/MSc_Bonney_East/V9_18S_MSc_Bonney_East_table.csv",sep=",",row.names=1,na.strings="")
MSc_Bonney_East_V9_otu_table=as.matrix(MSc_Bonney_East_V9_otu_table)

#Read in taxonomy
MSc_Bonney_East_V9_taxonomy=read.csv("data/MSc_Bonney_East/V9_18S_MSc_Bonney_East-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
MSc_Bonney_East_V9_taxonomy_df<-as.data.frame(MSc_Bonney_East_V9_taxonomy)
#Filter out low confidence assignments
MSc_Bonney_East_V9_taxonomy_97_df<-MSc_Bonney_East_V9_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
MSc_Bonney_East_V9_taxonomy_97=as.matrix(MSc_Bonney_East_V9_taxonomy_97_df)

#Read in metadata
#V9_18S
MSc_Bonney_East_V9_metadata=read.csv("data/MSc_Bonney_East/V9_18S_MSc_Bonney_East_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_MSc_Bonney_East_V9=otu_table(MSc_Bonney_East_V9_otu_table,taxa_are_rows=TRUE)
TAX_MSc_Bonney_East_V9=tax_table(MSc_Bonney_East_V9_taxonomy_97)
META_MSc_Bonney_East_V9=sample_data(MSc_Bonney_East_V9_metadata)

#Check sample names are identical and same order
sample_names(OTU_MSc_Bonney_East_V9)
sample_names(META_MSc_Bonney_East_V9)

#Merge into one PhyloSeq object
ps_MSc_Bonney_East_V9=phyloseq(OTU_MSc_Bonney_East_V9,TAX_MSc_Bonney_East_V9,META_MSc_Bonney_East_V9)
ps_MSc_Bonney_East_V9

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_MSc_Bonney_East_V9)[!is.na(tax_table(ps_MSc_Bonney_East_V9)[,"Supergroup"])]
ps_MSc_Bonney_East_V9<-prune_taxa(keep_taxa,ps_MSc_Bonney_East_V9)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"MSc_Bonney_East_"
old_names<-taxa_names(ps_MSc_Bonney_East_V9)
new_names<-paste0(prefix,old_names)
taxa_names(ps_MSc_Bonney_East_V9)<-new_names
otu_table(ps_MSc_Bonney_East_V9)<-otu_table(ps_MSc_Bonney_East_V9)[new_names,]
tax_table(ps_MSc_Bonney_East_V9)<-tax_table(ps_MSc_Bonney_East_V9)[new_names,]
```

### MSc_Joyce

```{r}
#Read in OTU table
MSc_Joyce_V9_otu_table=read.csv("data/MSc_Joyce/V9_18S_MSc_Joyce_table.csv",sep=",",row.names=1,na.strings="")
MSc_Joyce_V9_otu_table=as.matrix(MSc_Joyce_V9_otu_table)

#Read in taxonomy
MSc_Joyce_V9_taxonomy=read.csv("data/MSc_Joyce/V9_18S_MSc_Joyce-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
MSc_Joyce_V9_taxonomy_df<-as.data.frame(MSc_Joyce_V9_taxonomy)
#Filter out low confidence assignments
MSc_Joyce_V9_taxonomy_97_df<-MSc_Joyce_V9_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
MSc_Joyce_V9_taxonomy_97=as.matrix(MSc_Joyce_V9_taxonomy_97_df)

#Read in metadata
#V9_18S
MSc_Joyce_V9_metadata=read.csv("data/MSc_Joyce/V9_18S_MSc_Joyce_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_MSc_Joyce_V9=otu_table(MSc_Joyce_V9_otu_table,taxa_are_rows=TRUE)
TAX_MSc_Joyce_V9=tax_table(MSc_Joyce_V9_taxonomy_97)
META_MSc_Joyce_V9=sample_data(MSc_Joyce_V9_metadata)

#Check sample names are identical and same order
sample_names(OTU_MSc_Joyce_V9)
sample_names(META_MSc_Joyce_V9)

#Merge into one PhyloSeq object
ps_MSc_Joyce_V9=phyloseq(OTU_MSc_Joyce_V9,TAX_MSc_Joyce_V9,META_MSc_Joyce_V9)
ps_MSc_Joyce_V9

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_MSc_Joyce_V9)[!is.na(tax_table(ps_MSc_Joyce_V9)[,"Supergroup"])]
ps_MSc_Joyce_V9<-prune_taxa(keep_taxa,ps_MSc_Joyce_V9)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"MSc_Joyce_"
old_names<-taxa_names(ps_MSc_Joyce_V9)
new_names<-paste0(prefix,old_names)
taxa_names(ps_MSc_Joyce_V9)<-new_names
otu_table(ps_MSc_Joyce_V9)<-otu_table(ps_MSc_Joyce_V9)[new_names,]
tax_table(ps_MSc_Joyce_V9)<-tax_table(ps_MSc_Joyce_V9)[new_names,]
```

### MSc_Vanda

```{r}
#Read in OTU table
MSc_Vanda_V9_otu_table=read.csv("data/MSc_Vanda/V9_18S_MSc_Vanda_table.csv",sep=",",row.names=1,na.strings="")
MSc_Vanda_V9_otu_table=as.matrix(MSc_Vanda_V9_otu_table)

#Read in taxonomy
MSc_Vanda_V9_taxonomy=read.csv("data/MSc_Vanda/V9_18S_MSc_Vanda-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
MSc_Vanda_V9_taxonomy_df<-as.data.frame(MSc_Vanda_V9_taxonomy)
#Filter out low confidence assignments
MSc_Vanda_V9_taxonomy_97_df<-MSc_Vanda_V9_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
MSc_Vanda_V9_taxonomy_97=as.matrix(MSc_Vanda_V9_taxonomy_97_df)

#Read in metadata
#V9_18S
MSc_Vanda_V9_metadata=read.csv("data/MSc_Vanda/V9_18S_MSc_Vanda_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_MSc_Vanda_V9=otu_table(MSc_Vanda_V9_otu_table,taxa_are_rows=TRUE)
TAX_MSc_Vanda_V9=tax_table(MSc_Vanda_V9_taxonomy_97)
META_MSc_Vanda_V9=sample_data(MSc_Vanda_V9_metadata)

#Check sample names are identical and same order
sample_names(OTU_MSc_Vanda_V9)
sample_names(META_MSc_Vanda_V9)

#Merge into one PhyloSeq object
ps_MSc_Vanda_V9=phyloseq(OTU_MSc_Vanda_V9,TAX_MSc_Vanda_V9,META_MSc_Vanda_V9)
ps_MSc_Vanda_V9

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_MSc_Vanda_V9)[!is.na(tax_table(ps_MSc_Vanda_V9)[,"Supergroup"])]
ps_MSc_Vanda_V9<-prune_taxa(keep_taxa,ps_MSc_Vanda_V9)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"MSc_Vanda_"
old_names<-taxa_names(ps_MSc_Vanda_V9)
new_names<-paste0(prefix,old_names)
taxa_names(ps_MSc_Vanda_V9)<-new_names
otu_table(ps_MSc_Vanda_V9)<-otu_table(ps_MSc_Vanda_V9)[new_names,]
tax_table(ps_MSc_Vanda_V9)<-tax_table(ps_MSc_Vanda_V9)[new_names,]
```

### PRJNA744712

```{r}
#Read in OTU table
PRJNA744712_V9_otu_table=read.csv("data/PRJNA744712/V9_18S_PRJNA744712_table.csv",sep=",",row.names=1,na.strings="")
PRJNA744712_V9_otu_table=as.matrix(PRJNA744712_V9_otu_table)

#Read in taxonomy
PRJNA744712_V9_taxonomy=read.csv("data/PRJNA744712/V9_18S_PRJNA744712-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
PRJNA744712_V9_taxonomy_df<-as.data.frame(PRJNA744712_V9_taxonomy)
#Filter out low confidence assignments
PRJNA744712_V9_taxonomy_97_df<-PRJNA744712_V9_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
PRJNA744712_V9_taxonomy_97=as.matrix(PRJNA744712_V9_taxonomy_97_df)

#Read in metadata
#V9_18S
PRJNA744712_V9_metadata=read.csv("data/PRJNA744712/V9_18S_PRJNA744712_metadata.csv",row.names=1,na.strings="")

#Import as PhyloSeq objects
OTU_PRJNA744712_V9=otu_table(PRJNA744712_V9_otu_table,taxa_are_rows=TRUE)
TAX_PRJNA744712_V9=tax_table(PRJNA744712_V9_taxonomy_97)
META_PRJNA744712_V9=sample_data(PRJNA744712_V9_metadata)

#Check sample names are identical and same order
sample_names(OTU_PRJNA744712_V9)
sample_names(META_PRJNA744712_V9)

#Merge into one PhyloSeq object
ps_PRJNA744712_V9=phyloseq(OTU_PRJNA744712_V9,TAX_PRJNA744712_V9,META_PRJNA744712_V9)
ps_PRJNA744712_V9

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_PRJNA744712_V9)[!is.na(tax_table(ps_PRJNA744712_V9)[,"Supergroup"])]
ps_PRJNA744712_V9<-prune_taxa(keep_taxa,ps_PRJNA744712_V9)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"PRJNA744712_"
old_names<-taxa_names(ps_PRJNA744712_V9)
new_names<-paste0(prefix,old_names)
taxa_names(ps_PRJNA744712_V9)<-new_names
otu_table(ps_PRJNA744712_V9)<-otu_table(ps_PRJNA744712_V9)[new_names,]
tax_table(ps_PRJNA744712_V9)<-tax_table(ps_PRJNA744712_V9)[new_names,]
```

## Merging individual V4 phyloseq objects together

```{r}
#Merge phyloseq objects
ps_merged_V4<-merge_phyloseq(ps_PRJNA329332_V4,ps_PRJNA803180_V4,ps_PRJNA805287_V4,ps_PRJNA838732_V4)

#How many ASVs and samples
ntaxa(ps_merged_V4)
nsamples(ps_merged_V4)

#Extract metadata and export into a csv
f<-paste(getwd(),"ps_merged_V4_metadata.csv",sep="/")
merged_metadata<-meta(ps_merged_V4)
#write.csv(merged_metadata,file=f)

#Compositional transformation
ps_merged_V4_comp<-microbiome::transform(ps_merged_V4,"compositional")
#Melt into dataframe
ps_merged_V4_comp_melt<-psmelt(ps_merged_V4_comp)

#Reorder sample names
reordering_df<-ps_merged_V4_comp_melt
reordering_df$Sample.Name<-fct_relevel(reordering_df$Sample.Name,"WH_littoral_mat_RNA_1","WH_littoral_mat_RNA_2","WH_littoral_mat_RNA_3","WH_shallow_mat_RNA_1","WH_shallow_mat_RNA_2","WH_shallow_mat_RNA_3","WH_deep_mat_RNA_1","WH_deep_mat_RNA_2","WH_deep_mat_RNA_3","WH_littoral_mat_1","WH_littoral_mat_2","WH_littoral_mat_3","WH_shallow_mat_1","WH_shallow_mat_2","WH_shallow_mat_3","WH_deep_mat_1","WH_deep_mat_2","WH_deep_mat_3","WH_snow_pack_1","WH_snow_pack_2","WH_snow_pack_3","WH_water_track_1","WH_water_track_2","WH_water_track_3","WH_lake_outlet_1","WH_lake_outlet_2","WH_lake_outlet_3","WH_epilimnion_1","WH_epilimnion_2","WH_epilimnion_3","WH_mixolimnion_1","WH_mixolimnion_2","WH_mixolimnion_3","WH_hypolimnion_1","WH_hypolimnion_2","WH_hypolimnion_3","L_RNA_small","L_RNA_large","L_DNA_small","L_DNA_large","T1_RNA_small","T1_RNA_large","T1_DNA_small","T1_DNA_large","T2_RNA_small","T2_RNA_large","T2_DNA_small","T2_DNA_large","R1_RNA_small","R1_RNA_large","R1_DNA_small","R1_DNA_large","R2_RNA_small","R2_RNA_large","R2_DNA_small","R2_DNA_large","R3_RNA_small","R3_RNA_large","R3_DNA_small","R3_DNA_large","R4_RNA_small","R4_RNA_large","R4_DNA_small","R4_DNA_large","R5_RNA_small","R5_RNA_large","R5_DNA_small","R5_DNA_large","R6_RNA_small","R6_RNA_large","R6_DNA_small","R6_DNA_large","R7_RNA_small","R7_RNA_large","R7_DNA_small","R7_DNA_large","R8_RNA_small","R8_RNA_large","R8_DNA_small","R8_DNA_large","R9_RNA_small","R9_RNA_large","R9_DNA_small","R9_DNA_large","P1_RNA_small","P1_RNA_large","P1_DNA_small","P1_DNA_large","P2_RNA_small","P2_RNA_large","P2_DNA_small","P2_DNA_large","P3_RNA_small","P3_RNA_large","P3_DNA_small","P3_DNA_large","B_RNA_small","B_RNA_large","B_DNA_small","B_DNA_large","WS_surface","KS_surface","KS_upper_0.5a","KS_upper_0.5b","KS_upper_1a","KS_upper_1b","KS_mid_1.5a","KS_mid_1.5b","KS_mid_2a","KS_mid_2b","KS_chemocline_2.5a","KS_chemocline_2.5b","KS_chemocline_3a","KS_chemocline_3b","KS_chemocline_3.1a","KS_chemocline_3.1b","KS_anoxic_3.5","KS_anoxic_4a","KS_anoxic_4b","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
ps_merged_V4_comp_melt<-reordering_df

#Name colour palettes using this dataframe
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))
```

## Alpha diversity

```{r}
#Calculate alpha diversity indices
merged_V4_alpha<-estimate_richness(ps_merged_V4,measures=c("Observed","Shannon","Simpson"))
#Add sample metadata to this new alpha diversity dataframe
merged_V4_alpha$SampleID<-rownames(merged_V4_alpha)
merged_V4_metadata<-as(sample_data(ps_merged_V4),"data.frame")
merged_V4_alpha<-cbind(merged_V4_alpha,merged_V4_metadata[merged_V4_alpha$SampleID,])
#reshape to long format
merged_V4_alpha_long<-pivot_longer(merged_V4_alpha,cols=c("Observed","Shannon","Simpson"),names_to="Index",values_to="Diversity")



#Reorder sample ids
reordering_df<-merged_V4_alpha_long
reordering_df$Sample.Name<-fct_relevel(reordering_df$Sample.Name,"WH_littoral_mat_RNA_1","WH_littoral_mat_RNA_2","WH_littoral_mat_RNA_3","WH_shallow_mat_RNA_1","WH_shallow_mat_RNA_2","WH_shallow_mat_RNA_3","WH_deep_mat_RNA_1","WH_deep_mat_RNA_2","WH_deep_mat_RNA_3","WH_littoral_mat_1","WH_littoral_mat_2","WH_littoral_mat_3","WH_shallow_mat_1","WH_shallow_mat_2","WH_shallow_mat_3","WH_deep_mat_1","WH_deep_mat_2","WH_deep_mat_3","WH_snow_pack_1","WH_snow_pack_2","WH_snow_pack_3","WH_water_track_1","WH_water_track_2","WH_water_track_3","WH_lake_outlet_1","WH_lake_outlet_2","WH_lake_outlet_3","WH_epilimnion_1","WH_epilimnion_2","WH_epilimnion_3","WH_mixolimnion_1","WH_mixolimnion_2","WH_mixolimnion_3","WH_hypolimnion_1","WH_hypolimnion_2","WH_hypolimnion_3","L_RNA_small","L_RNA_large","L_DNA_small","L_DNA_large","T1_RNA_small","T1_RNA_large","T1_DNA_small","T1_DNA_large","T2_RNA_small","T2_RNA_large","T2_DNA_small","T2_DNA_large","R1_RNA_small","R1_RNA_large","R1_DNA_small","R1_DNA_large","R2_RNA_small","R2_RNA_large","R2_DNA_small","R2_DNA_large","R3_RNA_small","R3_RNA_large","R3_DNA_small","R3_DNA_large","R4_RNA_small","R4_RNA_large","R4_DNA_small","R4_DNA_large","R5_RNA_small","R5_RNA_large","R5_DNA_small","R5_DNA_large","R6_RNA_small","R6_RNA_large","R6_DNA_small","R6_DNA_large","R7_RNA_small","R7_RNA_large","R7_DNA_small","R7_DNA_large","R8_RNA_small","R8_RNA_large","R8_DNA_small","R8_DNA_large","R9_RNA_small","R9_RNA_large","R9_DNA_small","R9_DNA_large","P1_RNA_small","P1_RNA_large","P1_DNA_small","P1_DNA_large","P2_RNA_small","P2_RNA_large","P2_DNA_small","P2_DNA_large","P3_RNA_small","P3_RNA_large","P3_DNA_small","P3_DNA_large","B_RNA_small","B_RNA_large","B_DNA_small","B_DNA_large","WS_surface","KS_surface","KS_upper_0.5a","KS_upper_0.5b","KS_upper_1a","KS_upper_1b","KS_mid_1.5a","KS_mid_1.5b","KS_mid_2a","KS_mid_2b","KS_chemocline_2.5a","KS_chemocline_2.5b","KS_chemocline_3a","KS_chemocline_3b","KS_chemocline_3.1a","KS_chemocline_3.1b","KS_anoxic_3.5","KS_anoxic_4a","KS_anoxic_4b","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
merged_V4_alpha_long<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#plot
p<-ggplot(merged_V4_alpha_long,aes(x=env_broad_scale,y=Diversity,colour=env_broad_scale,fill=env_broad_scale))+
  scale_colour_manual("Broad Location",values=site_palette)+
  scale_fill_manual("Broad Location",values=site_palette)+
  geom_point(size=3)+
  geom_boxplot(alpha=0.8)+
  facet_wrap(~Index,scales="free_y")+
  labs(x="Site",y="Alpha Diversity")+
  theme(axis.text.x=element_text(angle=90,vjust=1,hjust=1))
print(p)

ggsave("plots/ps_merged_V4_alpha.svg",width=400,height=400,units=c("mm"))
```

## Beta diversity - NMDS

```{r}
#NMDS
ps_merged_V4_Class_comp<-process_ps_18S(ps_merged_V4,glom="Class",transformation="comp",remove_na=T)
ps_merged_V4_Class_comp_melt<-psmelt(ps_merged_V4_Class_comp)
ps_merged_V4_Class_comp_melt<-prune_0(ps_merged_V4_Class_comp_melt)
#Reordering
reordering_df<-ps_merged_V4_Class_comp_melt
reordering_df$Sample.Name<-fct_relevel(reordering_df$Sample.Name,"WH_littoral_mat_RNA_1","WH_littoral_mat_RNA_2","WH_littoral_mat_RNA_3","WH_shallow_mat_RNA_1","WH_shallow_mat_RNA_2","WH_shallow_mat_RNA_3","WH_deep_mat_RNA_1","WH_deep_mat_RNA_2","WH_deep_mat_RNA_3","WH_littoral_mat_1","WH_littoral_mat_2","WH_littoral_mat_3","WH_shallow_mat_1","WH_shallow_mat_2","WH_shallow_mat_3","WH_deep_mat_1","WH_deep_mat_2","WH_deep_mat_3","WH_snow_pack_1","WH_snow_pack_2","WH_snow_pack_3","WH_water_track_1","WH_water_track_2","WH_water_track_3","WH_lake_outlet_1","WH_lake_outlet_2","WH_lake_outlet_3","WH_epilimnion_1","WH_epilimnion_2","WH_epilimnion_3","WH_mixolimnion_1","WH_mixolimnion_2","WH_mixolimnion_3","WH_hypolimnion_1","WH_hypolimnion_2","WH_hypolimnion_3","L_RNA_small","L_RNA_large","L_DNA_small","L_DNA_large","T1_RNA_small","T1_RNA_large","T1_DNA_small","T1_DNA_large","T2_RNA_small","T2_RNA_large","T2_DNA_small","T2_DNA_large","R1_RNA_small","R1_RNA_large","R1_DNA_small","R1_DNA_large","R2_RNA_small","R2_RNA_large","R2_DNA_small","R2_DNA_large","R3_RNA_small","R3_RNA_large","R3_DNA_small","R3_DNA_large","R4_RNA_small","R4_RNA_large","R4_DNA_small","R4_DNA_large","R5_RNA_small","R5_RNA_large","R5_DNA_small","R5_DNA_large","R6_RNA_small","R6_RNA_large","R6_DNA_small","R6_DNA_large","R7_RNA_small","R7_RNA_large","R7_DNA_small","R7_DNA_large","R8_RNA_small","R8_RNA_large","R8_DNA_small","R8_DNA_large","R9_RNA_small","R9_RNA_large","R9_DNA_small","R9_DNA_large","P1_RNA_small","P1_RNA_large","P1_DNA_small","P1_DNA_large","P2_RNA_small","P2_RNA_large","P2_DNA_small","P2_DNA_large","P3_RNA_small","P3_RNA_large","P3_DNA_small","P3_DNA_large","B_RNA_small","B_RNA_large","B_DNA_small","B_DNA_large","WS_surface","KS_surface","KS_upper_0.5a","KS_upper_0.5b","KS_upper_1a","KS_upper_1b","KS_mid_1.5a","KS_mid_1.5b","KS_mid_2a","KS_mid_2b","KS_chemocline_2.5a","KS_chemocline_2.5b","KS_chemocline_3a","KS_chemocline_3b","KS_chemocline_3.1a","KS_chemocline_3.1b","KS_anoxic_3.5","KS_anoxic_4a","KS_anoxic_4b","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
ps_merged_V4_Class_comp_melt<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#Ordination
ps_merged_V4_Class_comp_ord_weighted<-ordinate(ps_merged_V4_Class_comp,"NMDS","bray")
#Stress: 0.1589103
#ANOSIMs
ps_merged_V4_Class_comp_loc_group=get_variable(ps_merged_V4_Class_comp, "env_broad_scale")
ps_merged_V4_Class_comp_loc_anosim=anosim(distance(ps_merged_V4_Class_comp, "bray"), ps_merged_V4_Class_comp_loc_group)
ps_merged_V4_Class_comp_loc_anosim
#ANOSIM: Stress = 0.1819698, ANOSIM R-Stat 0.4945, p value = 0.001


ps_merged_V4_Class_comp_dataframe<-as.data.frame(sample_data(ps_merged_V4_Class_comp))
ps_merged_V4_Class_comp_nmds_weighted<-plot_ordination(ps_merged_V4_Class_comp,ps_merged_V4_Class_comp_ord_weighted,type="samples",
                                      color="env_broad_scale",label="Sample.Name",shape="env_medium")+
  ggtitle("ANOSIM: Stress = 0.1819698, ANOSIM R-Stat 0.4945, p value = 0.001")+
  scale_colour_manual("Location",values=site_palette)+
  scale_shape_manual("Media",values=c(15,16,17))+
  geom_point(size=4,alpha=0.8)+
  geom_text_repel(mapping=aes(x=NMDS1,y=NMDS2,label=Sample.Name,fontface="bold"),inherit.aes=F,,size = 3,vjust=0,nudge_y=0.04,max.overlaps=100)+
  geom_mark_hull(aes(fill=env_broad_scale,colour=env_broad_scale),show.legend=F)+
  expand_limits(x=1.5,y=1)+
  theme_mine()
ps_merged_V4_Class_comp_nmds_weighted$layers
ps_merged_V4_Class_comp_nmds_weighted$layers<-ps_merged_V4_Class_comp_nmds_weighted$layers[-1]
ps_merged_V4_Class_comp_nmds_weighted$layers<-ps_merged_V4_Class_comp_nmds_weighted$layers[-1]
ps_merged_V4_Class_comp_nmds_weighted
ggsave("Plots/ps_merged_V4_Class_comp_nmds_weighted.svg",width=400,height=250,units=c("mm"))
```

## Relative Abundance bubble plots

### Class level

```{r}
#Class level
ps_merged_V4_Class_comp<-process_ps_18S(ps_merged_V4,glom="Class",transformation="comp",remove_na=F)
#Extract taxonomy table
tax<-tax_table(ps_merged_V4_Class_comp)
unresolved_taxa<-is.na(tax[,"Class"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to class level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"
#Replace tax table of phyloseq object
tax_table(ps_merged_V4_Class_comp)<-tax_fixed
#Reprocess the ps object
ps_merged_V4_Class_comp<-tax_glom(ps_merged_V4_Class_comp,taxrank="Class")
ps_merged_V4_Class_comp_melt<-psmelt(ps_merged_V4_Class_comp)
ps_merged_V4_Class_comp_melt[["Class"]]<-as.character(ps_merged_V4_Class_comp_melt[["Class"]])
ps_merged_V4_Class_comp_melt<-prune_0(ps_merged_V4_Class_comp_melt)

#Reordering
reordering_df<-ps_merged_V4_Class_comp_melt
reordering_df$Sample.Name<-fct_relevel(reordering_df$Sample.Name,"WH_littoral_mat_RNA_1","WH_littoral_mat_RNA_2","WH_littoral_mat_RNA_3","WH_shallow_mat_RNA_1","WH_shallow_mat_RNA_2","WH_shallow_mat_RNA_3","WH_deep_mat_RNA_1","WH_deep_mat_RNA_2","WH_deep_mat_RNA_3","WH_littoral_mat_1","WH_littoral_mat_2","WH_littoral_mat_3","WH_shallow_mat_1","WH_shallow_mat_2","WH_shallow_mat_3","WH_deep_mat_1","WH_deep_mat_2","WH_deep_mat_3","WH_snow_pack_1","WH_snow_pack_2","WH_snow_pack_3","WH_water_track_1","WH_water_track_2","WH_water_track_3","WH_lake_outlet_1","WH_lake_outlet_2","WH_lake_outlet_3","WH_epilimnion_1","WH_epilimnion_2","WH_epilimnion_3","WH_mixolimnion_1","WH_mixolimnion_2","WH_mixolimnion_3","WH_hypolimnion_1","WH_hypolimnion_2","WH_hypolimnion_3","L_RNA_small","L_RNA_large","L_DNA_small","L_DNA_large","T1_RNA_small","T1_RNA_large","T1_DNA_small","T1_DNA_large","T2_RNA_small","T2_RNA_large","T2_DNA_small","T2_DNA_large","R1_RNA_small","R1_RNA_large","R1_DNA_small","R1_DNA_large","R2_RNA_small","R2_RNA_large","R2_DNA_small","R2_DNA_large","R3_RNA_small","R3_RNA_large","R3_DNA_small","R3_DNA_large","R4_RNA_small","R4_RNA_large","R4_DNA_small","R4_DNA_large","R5_RNA_small","R5_RNA_large","R5_DNA_small","R5_DNA_large","R6_RNA_small","R6_RNA_large","R6_DNA_small","R6_DNA_large","R7_RNA_small","R7_RNA_large","R7_DNA_small","R7_DNA_large","R8_RNA_small","R8_RNA_large","R8_DNA_small","R8_DNA_large","R9_RNA_small","R9_RNA_large","R9_DNA_small","R9_DNA_large","P1_RNA_small","P1_RNA_large","P1_DNA_small","P1_DNA_large","P2_RNA_small","P2_RNA_large","P2_DNA_small","P2_DNA_large","P3_RNA_small","P3_RNA_large","P3_DNA_small","P3_DNA_large","B_RNA_small","B_RNA_large","B_DNA_small","B_DNA_large","WS_surface","KS_surface","KS_upper_0.5a","KS_upper_0.5b","KS_upper_1a","KS_upper_1b","KS_mid_1.5a","KS_mid_1.5b","KS_mid_2a","KS_mid_2b","KS_chemocline_2.5a","KS_chemocline_2.5b","KS_chemocline_3a","KS_chemocline_3b","KS_chemocline_3.1a","KS_chemocline_3.1b","KS_anoxic_3.5","KS_anoxic_4a","KS_anoxic_4b","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
ps_merged_V4_Class_comp_melt<-reordering_df


# Calculate mean abundance by Class
mean_abund <- ps_merged_V4_Class_comp_melt %>%
  group_by(Class) %>%
  summarise(mean_abund = mean(Abundance, na.rm = TRUE)) %>%
  arrange(desc(mean_abund))
# Get levels in abundance order
Class_levels<-mean_abund$Class
# Move 'Unresolved' to the end
Class_levels<-c(setdiff(Class_levels, "Unresolved"), "Unresolved")
# Apply new levels
ps_merged_V4_Class_comp_melt$Class<-factor(ps_merged_V4_Class_comp_melt$Class,levels=Class_levels)

#Group low abundance data together (<0.01%)
ps_merged_V4_Class_comp_melt[["Class"]][ps_merged_V4_Class_comp_melt$Abundance<0.001]<-"<0.1% total abundance"
#Remove any NAs generated
ps_merged_V4_Class_comp_melt$Class[is.na(ps_merged_V4_Class_comp_melt$Class)] <- "Unresolved"
#Palette with lots of colours
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#plot bubble plot
bubble_plot<-ggplot(ps_merged_V4_Class_comp_melt,aes(shape=geo_loc_name,x=Sample.Name,y=fct_rev(Class)))+
  geom_point(aes(size=Abundance,color=as.factor(env_broad_scale),shape=env_medium),alpha=0.8)+
  scale_size_continuous("Relative Abundance",limits=c(0.00001,1),range=c(1.5,15),breaks=c(0.10,0.25,0.50,0.75,1),labels=c("10%","25%","50%","75%","100%"))+
  scale_color_manual("Location",values=site_palette)+
  scale_shape_manual("Country",values=c(16,15,17,18))+
  labs(y="Class",x="Sample")+
  theme_bubble()+
  expand_limits(y=c(0,length(levels(ps_merged_V4_Class_comp_melt$"Class"))),x=c(0,length(levels(ps_merged_V4_Class_comp_melt$"Sample.Name"))))+
  guides(size=guide_legend(order=1),colour=guide_legend(order=2))
bubble_plot$layers
bubble_plot
ggsave("Plots/ps_merged_V4_Class_bubble_plot_with_unresolved.svg",width=600,height=400,units=c("mm"))
```

## Averaging across replicates

```{r}
#Convert NAs to 0 abundance
otu_table(ps_merged_V4)[is.na(otu_table(ps_merged_V4))]<-0

#Preserve metadata
metadata_backup <- as(sample_data(ps_merged_V4_comp), "data.frame")
metadata_backup$SampleID <- rownames(metadata_backup)

#Merge samples according to their replicate group
ps_merged_V4_grouped<-merge_samples(ps_merged_V4,group="RepGroup")


#Create new metadata manually, using first row per group since the replicates had identical metadata
metadata_grouped <- metadata_backup %>%
  group_by(RepGroup) %>%
  slice(1) %>%
  ungroup()

#Force setting of sample names to correct rownames (RepGroup)
metadata_grouped_sd<-sample_data(as.data.frame(metadata_grouped))
sample_names(metadata_grouped_sd)<-metadata_grouped$RepGroup
sample_data(ps_merged_V4_grouped) <- metadata_grouped_sd


#get number of replicates per group
rep_counts<-table(sample_data(ps_merged_V4)$RepGroup)

#extract and convert otu table to a matrix
otu_mat<-as(otu_table(ps_merged_V4_grouped),"matrix")
otu_mat<-t(otu_mat)
#ensure sample names match
missing_names <- setdiff(colnames(otu_mat), names(rep_counts))
if (length(missing_names) > 0) {
  print("Warning: These merged sample names are missing from rep_counts:")
  print(missing_names)
}
colnames(otu_mat) <- as.character(colnames(otu_mat))
names(rep_counts) <- as.character(names(rep_counts))


#Average
otu_mat<-sweep(otu_mat,2,rep_counts[colnames(otu_mat)],"/")
otu_mat[is.na(otu_mat)] <- 0
#average merged abundances
#otu_table(ps_merged_V4_comp_grouped)<-otu_table(ps_merged_V4_comp_grouped)/rep_counts[rownames(otu_table(ps_merged_V4_comp_grouped))]

#Check and align sample names
otu_mat <- otu_mat[, rownames(sample_data(ps_merged_V4_grouped))]

#Return back to phyloseq object
otu_table(ps_merged_V4_grouped) <- otu_table(otu_mat, taxa_are_rows = TRUE)
```

## Relative Abundance bubble plots

### Class level

```{r}
#Class level
ps_merged_V4_grouped_Class_comp<-process_ps_18S(ps_merged_V4_grouped,glom="Class",transformation="comp",remove_na=F)
#Extract taxonomy table
tax<-tax_table(ps_merged_V4_grouped_Class_comp)
unresolved_taxa<-is.na(tax[,"Class"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to class level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"
#Replace tax table of phyloseq object
tax_table(ps_merged_V4_grouped_Class_comp)<-tax_fixed
#Reprocess the ps object
ps_merged_V4_grouped_Class_comp<-tax_glom(ps_merged_V4_grouped_Class_comp,taxrank="Class")
ps_merged_V4_grouped_Class_comp_melt<-psmelt(ps_merged_V4_grouped_Class_comp)
ps_merged_V4_grouped_Class_comp_melt[["Class"]]<-as.character(ps_merged_V4_grouped_Class_comp_melt[["Class"]])
ps_merged_V4_grouped_Class_comp_melt<-prune_0(ps_merged_V4_grouped_Class_comp_melt)

#Reordering
reordering_df<-ps_merged_V4_grouped_Class_comp_melt
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"WH_littoral_mat","WH_shallow_mat","WH_deep_mat","WH_snow_pack","WH_water_track","WH_lake_outlet","WH_epilimnion","WH_mixolimnion","WH_hypolimnion","Sheldrake_Lake","Sheldrake_River_Tributary_1","Sheldrake_River_Tributary_2","Sheldrake_River_1","Sheldrake_River_2","Sheldrake_River_3","Sheldrake_River_4","Sheldrake_River_5","Sheldrake_River_6","Sheldrake_River_7","Sheldrake_River_8","Sheldrake_River_9","Hudson_Bay_Estuary_1","Hudson_Bay_Estuary_2","Hudson_Bay_Estuary_3","Hudson_Bay","WS_surface","KS_surface","KS_upper_0.5","KS_upper_1","KS_mid_1.5","KS_mid_2","KS_chemocline_2.5","KS_chemocline_3","KS_chemocline_3.1","KS_anoxic_3.5","KS_anoxic_4","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
ps_merged_V4_grouped_Class_comp_melt<-reordering_df


# Calculate mean abundance by Class
mean_abund <- ps_merged_V4_grouped_Class_comp_melt %>%
  group_by(Class) %>%
  summarise(mean_abund = mean(Abundance, na.rm = TRUE)) %>%
  arrange(desc(mean_abund))
# Get levels in abundance order
Class_levels<-mean_abund$Class
# Move 'Unresolved' to the end
Class_levels<-c(setdiff(Class_levels, "Unresolved"), "Unresolved")
# Apply new levels
ps_merged_V4_grouped_Class_comp_melt$Class<-factor(ps_merged_V4_grouped_Class_comp_melt$Class,levels=Class_levels)

#Group low abundance data together (<0.01%)
ps_merged_V4_grouped_Class_comp_melt[["Class"]][ps_merged_V4_grouped_Class_comp_melt$Abundance<0.001]<-"<0.1% total abundance"
#Remove any NAs generated
ps_merged_V4_grouped_Class_comp_melt$Class[is.na(ps_merged_V4_grouped_Class_comp_melt$Class)] <- "Unresolved"
#Palette with lots of colours
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#plot bubble plot
bubble_plot<-ggplot(ps_merged_V4_grouped_Class_comp_melt,aes(shape=geo_loc_name,x=RepGroup,y=fct_rev(Class)))+
  geom_point(aes(size=Abundance,color=as.factor(env_broad_scale),shape=env_medium),alpha=0.8)+
  scale_size_continuous("Relative Abundance",limits=c(0.00001,1),range=c(1.5,15),breaks=c(0.10,0.25,0.50,0.75,1),labels=c("10%","25%","50%","75%","100%"))+
  scale_color_manual("Location",values=site_palette)+
  scale_shape_manual("Country",values=c(16,15,17,18))+
  labs(y="Class",x="Sample")+
  theme_bubble()+
  #expand_limits(y=c(0,length(levels(ps_merged_V4_grouped_Class_comp_melt$"Class"))),x=c(0,length(levels(ps_merged_V4_grouped_Class_comp_melt$"RepGroup"))))+
  guides(size=guide_legend(order=1),colour=guide_legend(order=2))
bubble_plot$layers
bubble_plot
ggsave("Plots/ps_merged_V4_grouped_Class_bubble_plot_with_unresolved.svg",width=600,height=400,units=c("mm"))
```

## Beta diversity - NMDS

### Class level

```{r}
#NMDS
ps_merged_V4_grouped_Class_comp<-process_ps_18S(ps_merged_V4_grouped,glom="Class",transformation="comp",remove_na=T)
ps_merged_V4_grouped_Class_comp_melt<-psmelt(ps_merged_V4_grouped_Class_comp)
ps_merged_V4_grouped_Class_comp_melt<-prune_0(ps_merged_V4_grouped_Class_comp_melt)
#Reordering
#Reordering
reordering_df<-ps_merged_V4_grouped_Class_comp_melt
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"WH_littoral_mat","WH_shallow_mat","WH_deep_mat","WH_snow_pack","WH_water_track","WH_lake_outlet","WH_epilimnion","WH_mixolimnion","WH_hypolimnion","Sheldrake_Lake","Sheldrake_River_Tributary_1","Sheldrake_River_Tributary_2","Sheldrake_River_1","Sheldrake_River_2","Sheldrake_River_3","Sheldrake_River_4","Sheldrake_River_5","Sheldrake_River_6","Sheldrake_River_7","Sheldrake_River_8","Sheldrake_River_9","Hudson_Bay_Estuary_1","Hudson_Bay_Estuary_2","Hudson_Bay_Estuary_3","Hudson_Bay","WS_surface","KS_surface","KS_upper_0.5","KS_upper_1","KS_mid_1.5","KS_mid_2","KS_chemocline_2.5","KS_chemocline_3","KS_chemocline_3.1","KS_anoxic_3.5","KS_anoxic_4","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake")
ps_merged_V4_grouped_Class_comp_melt<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#Ordination
ps_merged_V4_grouped_Class_comp_ord_weighted<-ordinate(ps_merged_V4_grouped_Class_comp,"NMDS","bray")
#Stress: 0.1589103
#ANOSIMs
ps_merged_V4_grouped_Class_comp_loc_group=get_variable(ps_merged_V4_grouped_Class_comp, "env_broad_scale")
ps_merged_V4_grouped_Class_comp_loc_anosim=anosim(distance(ps_merged_V4_grouped_Class_comp, "bray"), ps_merged_V4_grouped_Class_comp_loc_group)
ps_merged_V4_grouped_Class_comp_loc_anosim
#ANOSIM: Stress = 0.1447421, ANOSIM R-Stat 0.4238, p value = 0.001


ps_merged_V4_grouped_Class_comp_dataframe<-as.data.frame(sample_data(ps_merged_V4_grouped_Class_comp))
ps_merged_V4_grouped_Class_comp_nmds_weighted<-plot_ordination(ps_merged_V4_grouped_Class_comp,ps_merged_V4_grouped_Class_comp_ord_weighted,type="samples",
                                      color="env_broad_scale",label="RepGroup",shape="env_medium")+
  ggtitle("ANOSIM: Stress = 0.1447421, ANOSIM R-Stat 0.4238, p value = 0.001")+
  scale_colour_manual("Location",values=site_palette)+
  scale_shape_manual("Media",values=c(15,16,17))+
  geom_point(size=4,alpha=0.8)+
  geom_text_repel(mapping=aes(x=NMDS1,y=NMDS2,label=RepGroup,fontface="bold"),inherit.aes=F,,size = 3,vjust=0,nudge_y=0.04,max.overlaps=100)+
  geom_mark_hull(aes(fill=env_broad_scale,colour=env_broad_scale),show.legend=F)+
  expand_limits(x=1.5,y=1)+
  theme_mine()
ps_merged_V4_grouped_Class_comp_nmds_weighted$layers
ps_merged_V4_grouped_Class_comp_nmds_weighted$layers<-ps_merged_V4_grouped_Class_comp_nmds_weighted$layers[-1]
ps_merged_V4_grouped_Class_comp_nmds_weighted$layers<-ps_merged_V4_grouped_Class_comp_nmds_weighted$layers[-1]
ps_merged_V4_grouped_Class_comp_nmds_weighted
ggsave("Plots/ps_merged_V4_grouped_Class_comp_nmds_weighted.svg",width=400,height=250,units=c("mm"))
```

## MERGE ALL V4 AND V9

```{r}
#Merge phyloseq objects
ps_merged<-merge_phyloseq(ps_PRJNA329332_V4,ps_PRJNA803180_V4,ps_PRJNA805287_V4,ps_PRJNA838732_V4,ps_MSc_Bonney_East_V9,ps_MSc_Joyce_V9,ps_MSc_Vanda_V9,ps_PRJNA744712_V9)

#How many ASVs and samples
ntaxa(ps_merged)
nsamples(ps_merged)

#Extract metadata and export into a csv
f<-paste(getwd(),"ps_merged_metadata.csv",sep="/")
merged_metadata<-meta(ps_merged)
#write.csv(merged_metadata,file=f)

#Compositional transformation
ps_merged_comp<-microbiome::transform(ps_merged,"compositional")
#Melt into dataframe
ps_merged_comp_melt<-psmelt(ps_merged_comp)

#Name colour palettes using this dataframe
site_palette<-unname(createPalette(length(unique(ps_merged_comp_melt$env_broad_scale)),c("#010101","#ffffff")))
```

### Averaging across replicates

```{r}
#Convert NAs to 0 abundance
otu_table(ps_merged)[is.na(otu_table(ps_merged))]<-0

#Preserve metadata
metadata_backup <- as(sample_data(ps_merged_comp), "data.frame")
metadata_backup$SampleID <- rownames(metadata_backup)

#Merge samples according to their replicate group
ps_merged_grouped<-merge_samples(ps_merged,group="RepGroup")


#Create new metadata manually, using first row per group since the replicates had identical metadata
metadata_grouped <- metadata_backup %>%
  group_by(RepGroup) %>%
  slice(1) %>%
  ungroup()

#Force setting of sample names to correct rownames (RepGroup)
metadata_grouped_sd<-sample_data(as.data.frame(metadata_grouped))
sample_names(metadata_grouped_sd)<-metadata_grouped$RepGroup
sample_data(ps_merged_grouped) <- metadata_grouped_sd


#get number of replicates per group
rep_counts<-table(sample_data(ps_merged)$RepGroup)

#extract and convert otu table to a matrix
otu_mat<-as(otu_table(ps_merged_grouped),"matrix")
otu_mat<-t(otu_mat)
#ensure sample names match
missing_names <- setdiff(colnames(otu_mat), names(rep_counts))
if (length(missing_names) > 0) {
  print("Warning: These merged sample names are missing from rep_counts:")
  print(missing_names)
}
colnames(otu_mat) <- as.character(colnames(otu_mat))
names(rep_counts) <- as.character(names(rep_counts))


#Average
otu_mat<-sweep(otu_mat,2,rep_counts[colnames(otu_mat)],"/")
otu_mat[is.na(otu_mat)] <- 0

#Check and align sample names
otu_mat <- otu_mat[, rownames(sample_data(ps_merged_grouped))]

#Return back to phyloseq object
otu_table(ps_merged_grouped) <- otu_table(otu_mat, taxa_are_rows = TRUE)
```

## Relative abundance plots

### Class level

```{r}
#Class level
ps_merged_grouped_Class_comp<-process_ps_18S(ps_merged_grouped,glom="Class",transformation="comp",remove_na=F)
#Extract taxonomy table
tax<-tax_table(ps_merged_grouped_Class_comp)
unresolved_taxa<-is.na(tax[,"Class"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to class level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"
#Replace tax table of phyloseq object
tax_table(ps_merged_grouped_Class_comp)<-tax_fixed
#Reprocess the ps object
ps_merged_grouped_Class_comp<-tax_glom(ps_merged_grouped_Class_comp,taxrank="Class")
ps_merged_grouped_Class_comp_melt<-psmelt(ps_merged_grouped_Class_comp)
ps_merged_grouped_Class_comp_melt[["Class"]]<-as.character(ps_merged_grouped_Class_comp_melt[["Class"]])
ps_merged_grouped_Class_comp_melt<-prune_0(ps_merged_grouped_Class_comp_melt)

#Reordering
reordering_df<-ps_merged_grouped_Class_comp_melt
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"WH_littoral_mat","WH_shallow_mat","WH_deep_mat","WH_snow_pack","WH_water_track","WH_lake_outlet","WH_epilimnion","WH_mixolimnion","WH_hypolimnion","Sheldrake_Lake","Sheldrake_River_Tributary_1","Sheldrake_River_Tributary_2","Sheldrake_River_1","Sheldrake_River_2","Sheldrake_River_3","Sheldrake_River_4","Sheldrake_River_5","Sheldrake_River_6","Sheldrake_River_7","Sheldrake_River_8","Sheldrake_River_9","Hudson_Bay_Estuary_1","Hudson_Bay_Estuary_2","Hudson_Bay_Estuary_3","Hudson_Bay","WS_surface","KS_surface","KS_upper_0.5","KS_upper_1","KS_mid_1.5","KS_mid_2","KS_chemocline_2.5","KS_chemocline_3","KS_chemocline_3.1","KS_anoxic_3.5","KS_anoxic_4","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8","Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier","Lake_Bonney_East","Lake_Joyce","Lake_Vanda")
ps_merged_grouped_Class_comp_melt<-reordering_df


# Calculate mean abundance by Class
mean_abund <- ps_merged_grouped_Class_comp_melt %>%
  group_by(Class) %>%
  summarise(mean_abund = mean(Abundance, na.rm = TRUE)) %>%
  arrange(desc(mean_abund))
# Get levels in abundance order
Class_levels<-mean_abund$Class
# Move 'Unresolved' to the end
Class_levels<-c(setdiff(Class_levels, "Unresolved"), "Unresolved")
# Apply new levels
ps_merged_grouped_Class_comp_melt$Class<-factor(ps_merged_grouped_Class_comp_melt$Class,levels=Class_levels)

#Group low abundance data together (<0.01%)
ps_merged_grouped_Class_comp_melt[["Class"]][ps_merged_grouped_Class_comp_melt$Abundance<0.001]<-"<0.1% total abundance"
#Remove any NAs generated
ps_merged_grouped_Class_comp_melt$Class[is.na(ps_merged_grouped_Class_comp_melt$Class)] <- "Unresolved"
#Palette with lots of colours
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#plot bubble plot
bubble_plot<-ggplot(ps_merged_grouped_Class_comp_melt,aes(shape=geo_loc_name,x=RepGroup,y=fct_rev(Class)))+
  geom_point(aes(size=Abundance,color=as.factor(env_broad_scale),shape=env_medium),alpha=0.8)+
  scale_size_continuous("Relative Abundance",limits=c(0.00001,1),range=c(1.5,15),breaks=c(0.10,0.25,0.50,0.75,1),labels=c("10%","25%","50%","75%","100%"))+
  scale_color_manual("Location",values=site_palette)+
  scale_shape_manual("Country",values=c(16,15,17,18))+
  labs(y="Class",x="Sample")+
  theme_bubble()+
  #expand_limits(y=c(0,length(levels(ps_merged_grouped_Class_comp_melt$"Class"))),x=c(0,length(levels(ps_merged_grouped_Class_comp_melt$"RepGroup"))))+
  guides(size=guide_legend(order=1),colour=guide_legend(order=2))
bubble_plot$layers
bubble_plot
ggsave("Plots/ps_merged_grouped_Class_bubble_plot_with_unresolved.svg",width=700,height=600,units=c("mm"))
```

## Beta diversity - NMDS

```{r}
#NMDS
ps_merged_grouped_Class_comp<-process_ps_18S(ps_merged_grouped,glom="Class",transformation="comp",remove_na=T)
ps_merged_grouped_Class_comp_melt<-psmelt(ps_merged_grouped_Class_comp)
ps_merged_grouped_Class_comp_melt<-prune_0(ps_merged_grouped_Class_comp_melt)
#Reordering
#Reordering
reordering_df<-ps_merged_grouped_Class_comp_melt
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"WH_littoral_mat","WH_shallow_mat","WH_deep_mat","WH_snow_pack","WH_water_track","WH_lake_outlet","WH_epilimnion","WH_mixolimnion","WH_hypolimnion","Sheldrake_Lake","Sheldrake_River_Tributary_1","Sheldrake_River_Tributary_2","Sheldrake_River_1","Sheldrake_River_2","Sheldrake_River_3","Sheldrake_River_4","Sheldrake_River_5","Sheldrake_River_6","Sheldrake_River_7","Sheldrake_River_8","Sheldrake_River_9","Hudson_Bay_Estuary_1","Hudson_Bay_Estuary_2","Hudson_Bay_Estuary_3","Hudson_Bay","WS_surface","KS_surface","KS_upper_0.5","KS_upper_1","KS_mid_1.5","KS_mid_2","KS_chemocline_2.5","KS_chemocline_3","KS_chemocline_3.1","KS_anoxic_3.5","KS_anoxic_4","Chang_Hu_17","Chang_Hu_18","Chang_Hu_19","Kitec_17","Kitec_18","Kitec_19","Xi_Hu_17","Xi_Hu_18","Xi_Hu_19","Yan_Ou_17","Yan_Ou_18","Yan_Ou_19","Yue_Ya_17","Yue_Ya_18","Yue_Ya_19","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8","Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Ward_Hunt_Lake","Sheldrake_Lake","Sheldrake_River_Tributary","Sheldrake_River","Hudson_Bay_Estuary","Hudson_Bay","White Sea","Kislo-Sladkoe Lake","Chang_Hu_Lake","Kitec_Lake","Xi_Hu_Lake","Yan_Ou_Lake","Yue_Ya_Lake","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier","Lake_Bonney_East","Lake_Joyce","Lake_Vanda")
ps_merged_grouped_Class_comp_melt<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$env_broad_scale)),c("#010101","#ffffff")))

#Ordination
ps_merged_grouped_Class_comp_ord_weighted<-ordinate(ps_merged_grouped_Class_comp,"NMDS","bray")
#Stress: 0.1589103
#ANOSIMs
ps_merged_grouped_Class_comp_loc_group=get_variable(ps_merged_grouped_Class_comp, "env_broad_scale")
ps_merged_grouped_Class_comp_loc_anosim=anosim(distance(ps_merged_grouped_Class_comp, "bray"), ps_merged_grouped_Class_comp_loc_group)
ps_merged_grouped_Class_comp_loc_anosim
#ANOSIM: Stress = 0.1447421, ANOSIM R-Stat 0.4238, p value = 0.001


ps_merged_grouped_Class_comp_dataframe<-as.data.frame(sample_data(ps_merged_grouped_Class_comp))
ps_merged_grouped_Class_comp_nmds_weighted<-plot_ordination(ps_merged_grouped_Class_comp,ps_merged_grouped_Class_comp_ord_weighted,type="samples",
                                      color="env_broad_scale",label="RepGroup",shape="env_medium")+
  ggtitle("ANOSIM: Stress = 0.1447421, ANOSIM R-Stat 0.4238, p value = 0.001")+
  scale_colour_manual("Location",values=site_palette)+
  scale_shape_manual("Media",values=c(15,16,17))+
  geom_point(size=4,alpha=0.8)+
  geom_text_repel(mapping=aes(x=NMDS1,y=NMDS2,label=RepGroup,fontface="bold"),inherit.aes=F,,size = 3,vjust=0,nudge_y=0.04,max.overlaps=100)+
  #geom_mark_hull(aes(fill=env_broad_scale,colour=env_broad_scale),show.legend=F)+
  expand_limits(x=1.5,y=1)+
  theme_mine()
ps_merged_grouped_Class_comp_nmds_weighted$layers
ps_merged_grouped_Class_comp_nmds_weighted$layers<-ps_merged_grouped_Class_comp_nmds_weighted$layers[-1]
ps_merged_grouped_Class_comp_nmds_weighted$layers<-ps_merged_grouped_Class_comp_nmds_weighted$layers[-1]
ps_merged_grouped_Class_comp_nmds_weighted
ggsave("Plots/ps_merged_grouped_Class_comp_nmds_weighted.svg",width=400,height=250,units=c("mm"))
```

## Import datasets which used the same primer, processed identically and merged in qiime

V9_1391f_EukBr

Trimming -\> trim left: 5; truncate forward: 200; truncate reverse: 185

```{r}
#Read in OTU table
V9_1391f_EukBr_otu_table=read.csv("data/V9_1391f_EukBr/V9_1391f_EukBr_table.csv",sep=",",row.names=1,na.strings="")
V9_1391f_EukBr_otu_table=as.matrix(V9_1391f_EukBr_otu_table)

#Read in taxonomy
V9_1391f_EukBr_taxonomy=read.csv("data/V9_1391f_EukBr/V9_1391f_EukBr-pr2-taxonomy.csv",sep=",",row.names=1,na.strings="")
V9_1391f_EukBr_taxonomy_df<-as.data.frame(V9_1391f_EukBr_taxonomy)
#Filter out low confidence assignments
V9_1391f_EukBr_taxonomy_97_df<-V9_1391f_EukBr_taxonomy_df%>%filter(as.numeric(Confidence)>=0.97)
V9_1391f_EukBr_taxonomy_97=as.matrix(V9_1391f_EukBr_taxonomy_97_df)

#Read in metadata
V9_1391f_EukBr_metadata=read.csv("data/V9_1391f_EukBr/V9_1391f_EukBr_metadata.csv",row.names=1,na.strings="")

#Read in tree
phy_tree_V9_1391f_EukBr<-read.tree("data/V9_1391f_EukBr/V9_1391f_EukBr_unrooted_tree.nwk")

#Import as PhyloSeq objects
OTU_V9_1391f_EukBr=otu_table(V9_1391f_EukBr_otu_table,taxa_are_rows=TRUE)
TAX_V9_1391f_EukBr=tax_table(V9_1391f_EukBr_taxonomy_97)
META_V9_1391f_EukBr=sample_data(V9_1391f_EukBr_metadata)

#Check sample names are identical and same order
sample_names(OTU_V9_1391f_EukBr)
sample_names(META_V9_1391f_EukBr)

#Merge into one PhyloSeq object
ps_V9_1391f_EukBr=phyloseq(OTU_V9_1391f_EukBr,TAX_V9_1391f_EukBr,META_V9_1391f_EukBr,phy_tree_V9_1391f_EukBr)
ps_V9_1391f_EukBr

#Filter out any ASVs not assigned further than 'Eukaryota' by removing any with 'NA' in the next taxonomic rank (Supergroup)
keep_taxa<-taxa_names(ps_V9_1391f_EukBr)[!is.na(tax_table(ps_V9_1391f_EukBr)[,"Supergroup"])]
ps_V9_1391f_EukBr<-prune_taxa(keep_taxa,ps_V9_1391f_EukBr)

#Add prefix to front of ASVs in ASV table and taxonomy table
prefix<-"V9_1391f_EukBr_"
old_names<-taxa_names(ps_V9_1391f_EukBr)
new_names<-paste0(prefix,old_names)
taxa_names(ps_V9_1391f_EukBr)<-new_names
otu_table(ps_V9_1391f_EukBr)<-otu_table(ps_V9_1391f_EukBr)[new_names,]
tax_table(ps_V9_1391f_EukBr)<-tax_table(ps_V9_1391f_EukBr)[new_names,]

#Remove embryophyceae and arthropoda
ps_V9_1391f_EukBr<-subset_taxa(ps_V9_1391f_EukBr,Class!="Embryophyceae")
ps_V9_1391f_EukBr<-subset_taxa(ps_V9_1391f_EukBr,Class!="Arthropoda")
#Prune phyloseq object
ps_V9_1391f_EukBr<-prune_taxa(taxa_names(ps_V9_1391f_EukBr),ps_V9_1391f_EukBr)
```

Merge replicates

```{r}
#Convert NAs to 0 abundance
otu_table(ps_V9_1391f_EukBr)[is.na(otu_table(ps_V9_1391f_EukBr))]<-0

#Preserve metadata
metadata_backup <- as(sample_data(ps_V9_1391f_EukBr), "data.frame")
metadata_backup$SampleID <- rownames(metadata_backup)

#Merge samples according to their replicate group
ps_V9_1391f_EukBr_grouped<-merge_samples(ps_V9_1391f_EukBr,group="RepGroup")


#Create new metadata manually, using first row per group since the replicates had identical metadata
metadata_grouped <- metadata_backup %>%
  group_by(RepGroup) %>%
  slice(1) %>%
  ungroup()

#Force setting of sample names to correct rownames (RepGroup)
metadata_grouped_sd<-sample_data(as.data.frame(metadata_grouped))
sample_names(metadata_grouped_sd)<-metadata_grouped$RepGroup
sample_data(ps_V9_1391f_EukBr_grouped) <- metadata_grouped_sd


#get number of replicates per group
rep_counts<-table(sample_data(ps_V9_1391f_EukBr)$RepGroup)

#extract and convert otu table to a matrix
otu_mat<-as(otu_table(ps_V9_1391f_EukBr_grouped),"matrix")
otu_mat<-t(otu_mat)
#ensure sample names match
missing_names <- setdiff(colnames(otu_mat), names(rep_counts))
if (length(missing_names) > 0) {
  print("Warning: These merged sample names are missing from rep_counts:")
  print(missing_names)
}
colnames(otu_mat) <- as.character(colnames(otu_mat))
names(rep_counts) <- as.character(names(rep_counts))


#Average
otu_mat<-sweep(otu_mat,2,rep_counts[colnames(otu_mat)],"/")
otu_mat[is.na(otu_mat)] <- 0
#average merged abundances
#otu_table(ps_merged_V4_comp_grouped)<-otu_table(ps_merged_V4_comp_grouped)/rep_counts[rownames(otu_table(ps_merged_V4_comp_grouped))]

#Check and align sample names
otu_mat <- otu_mat[, rownames(sample_data(ps_V9_1391f_EukBr_grouped))]

#Return back to phyloseq object
otu_table(ps_V9_1391f_EukBr_grouped) <- otu_table(otu_mat, taxa_are_rows = TRUE)
```

Relative abundance bubble plot

```{r}
#Class level
ps_V9_1391f_EukBr_grouped_Class_comp<-process_ps_18S(ps_V9_1391f_EukBr_grouped,glom="Class",transformation="comp",remove_na=F)
#Extract taxonomy table
tax<-tax_table(ps_V9_1391f_EukBr_grouped_Class_comp)
unresolved_taxa<-is.na(tax[,"Class"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to class level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"
#Replace tax table of phyloseq object
tax_table(ps_V9_1391f_EukBr_grouped_Class_comp)<-tax_fixed
#Reprocess the ps object
ps_V9_1391f_EukBr_grouped_Class_comp<-tax_glom(ps_V9_1391f_EukBr_grouped_Class_comp,taxrank="Class")
ps_V9_1391f_EukBr_grouped_Class_comp_melt<-psmelt(ps_V9_1391f_EukBr_grouped_Class_comp)
ps_V9_1391f_EukBr_grouped_Class_comp_melt[["Class"]]<-as.character(ps_V9_1391f_EukBr_grouped_Class_comp_melt[["Class"]])
ps_V9_1391f_EukBr_grouped_Class_comp_melt<-prune_0(ps_V9_1391f_EukBr_grouped_Class_comp_melt)

#Reordering
reordering_df<-ps_V9_1391f_EukBr_grouped_Class_comp_melt
#reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8")
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney East 18m","Bonney East 22m","Joyce 25m","Joyce 27m","Joyce 37m","Vanda 63m","Vanda 66m","Vanda 71m","Canada Glacier","Taylor Glacier","Commonwealth Glacier","Diamond Glacier","Utsteinen Nunatak","Miers Glacier","Lower Wright Glacier","Lower Koettlitz Glacier","Upper Koettlitz Glacier","Storglaciaren Glacier","Midtre Lovenbreen Glacier","Greenland Ice Margin Glacier","Greenland Ice Core Glacier","Kangerlussuaq Glacier")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Lake_Bonney_East","Lake_Joyce","Lake_Vanda","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier")
ps_V9_1391f_EukBr_grouped_Class_comp_melt<-reordering_df

#Remove any NAs generated
ps_V9_1391f_EukBr_grouped_Class_comp_melt$Class[is.na(ps_V9_1391f_EukBr_grouped_Class_comp_melt$Class)] <- "Unresolved"
#Group low abundance data together (<0.01%)
ps_V9_1391f_EukBr_grouped_Class_comp_melt[["Class"]][ps_V9_1391f_EukBr_grouped_Class_comp_melt$Abundance<0.001]<-"<0.1% total abundance"

# Calculate mean abundance by Class
mean_abund <- ps_V9_1391f_EukBr_grouped_Class_comp_melt %>%
  group_by(Class) %>%
  summarise(mean_abund = mean(Abundance, na.rm = TRUE)) %>%
  arrange(desc(mean_abund))
# Get levels in abundance order
Class_levels<-mean_abund$Class
# Move 'Unresolved' to the end
Class_levels<-c(setdiff(Class_levels, "Unresolved"), "Unresolved")
# Apply new levels
ps_V9_1391f_EukBr_grouped_Class_comp_melt$Class<-factor(ps_V9_1391f_EukBr_grouped_Class_comp_melt$Class,levels=Class_levels)

#Palette with lots of colours
site_palette<-unname(createPalette(length(unique(reordering_df$geo_loc_name)),c("#71c9c1","#ffc385")))

#plot bubble plot
bubble_plot<-ggplot(ps_V9_1391f_EukBr_grouped_Class_comp_melt,aes(shape=env_medium,x=RepGroup,y=fct_rev(Class)))+
  geom_point(aes(size=Abundance,color=as.factor(geo_loc_name),shape=env_medium),alpha=0.8)+
  scale_size_continuous("Relative Abundance",limits=c(0.00001,1),range=c(1.5,15),breaks=c(0.10,0.25,0.50,0.75,1),labels=c("10%","25%","50%","75%","100%"))+
  scale_color_manual("Location",values=site_palette)+
  scale_shape_manual("Sample media",values=c(16,15,17,18))+
  labs(y="Class",x="Sample")+
  theme_bubble()+
  #expand_limits(y=c(0,length(levels(ps_V9_1391f_EukBr_grouped_Class_comp_melt$"Class"))),x=c(0,length(levels(ps_V9_1391f_EukBr_grouped_Class_comp_melt$"RepGroup"))))+
  guides(size=guide_legend(order=1),colour=guide_legend(order=2))+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    axis.title.x = element_text(size = 24,face="bold"),
    axis.title.y = element_text(size = 24,face="bold")
  )
bubble_plot$layers
bubble_plot
#ggsave("Plots/ps_V9_1391f_EukBr_grouped_Class_bubble_plot_with_unresolved.svg",width=600,height=400,units=c("mm"))
ggsave("Plots/ps_V9_1391f_EukBr_grouped_cryo_Class_bubble_plot_with_unresolved.svg",width=600,height=400,units=c("mm"))
```

Alpha diversity

```{r}
#Round up to nearest integer
otu_table(ps_V9_1391f_EukBr_grouped)<-ceiling(otu_table(ps_V9_1391f_EukBr_grouped))

#Calculate alpha diversity indices
ps_V9_1391f_EukBr_grouped_alpha<-estimate_richness(ps_V9_1391f_EukBr_grouped,measures=c("Observed","Shannon","Simpson"))
#Add sample metadata to this new alpha diversity dataframe
ps_V9_1391f_EukBr_grouped_alpha$SampleID<-rownames(ps_V9_1391f_EukBr_grouped_alpha)
ps_V9_1391f_EukBr_grouped_metadata<-as(sample_data(ps_V9_1391f_EukBr_grouped),"data.frame")
ps_V9_1391f_EukBr_grouped_alpha<-cbind(ps_V9_1391f_EukBr_grouped_alpha,ps_V9_1391f_EukBr_grouped_metadata[ps_V9_1391f_EukBr_grouped_alpha$SampleID,])
#reshape to long format
ps_V9_1391f_EukBr_grouped_alpha_long<-pivot_longer(ps_V9_1391f_EukBr_grouped_alpha,cols=c("Observed","Shannon","Simpson"),names_to="Index",values_to="Diversity")

#Reorder sample ids
reordering_df<-ps_V9_1391f_EukBr_grouped_alpha_long
#reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8")
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney East 18m","Bonney East 22m","Joyce 25m","Joyce 27m","Joyce 37m","Vanda 63m","Vanda 66m","Vanda 71m","Canada Glacier","Taylor Glacier","Commonwealth Glacier","Diamond Glacier","Utsteinen Nunatak","Miers Glacier","Lower Wright Glacier","Lower Koettlitz Glacier","Upper Koettlitz Glacier","Storglaciaren Glacier","Midtre Lovenbreen Glacier","Greenland Ice Margin Glacier","Greenland Ice Core Glacier","Kangerlussuaq Glacier")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Lake_Bonney_East","Lake_Joyce","Lake_Vanda","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier")
ps_V9_1391f_EukBr_grouped_alpha_long<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$geo_loc_name)),c("#71c9c1","#ffc385")))

#plot
p<-ggplot(ps_V9_1391f_EukBr_grouped_alpha_long,aes(x=RepGroup,y=Diversity,colour=geo_loc_name,fill=geo_loc_name,shape=env_medium))+
  scale_colour_manual("Location",values=site_palette)+
  scale_fill_manual("Location",values=site_palette)+
  scale_shape_manual("Sample media",values=c(16,15,17,18))+
  geom_point(size=3)+
  geom_boxplot(alpha=0.8)+
  facet_wrap(~Index,scales="free_y")+
  labs(x="Sample Site",y="Alpha Diversity")+
  theme(
    axis.text.x=element_text(angle=90,vjust=1,hjust=1),
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    axis.title.x = element_text(size = 24,face="bold"),
    axis.title.y = element_text(size = 24,face="bold"))
print(p)

#ggsave("plots/ps_V9_1391f_EukBr_grouped_alpha.svg",width=400,height=400,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_grouped_cryo_alpha.svg",width=400,height=400,units=c("mm"))
```

NMDS

```{r}
#NMDS
ps_V9_1391f_EukBr_grouped_comp_nmds<-microbiome::transform(ps_V9_1391f_EukBr_grouped,"compositional")
ps_V9_1391f_EukBr_grouped_comp_nmds_melt<-psmelt(ps_V9_1391f_EukBr_grouped_comp_nmds)
ps_V9_1391f_EukBr_grouped_comp_nmds_melt<-prune_0(ps_V9_1391f_EukBr_grouped_comp_nmds_melt)
#Reordering
#Reordering
reordering_df<-ps_V9_1391f_EukBr_grouped_comp_nmds_melt
#reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8")
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney East 18m","Bonney East 22m","Joyce 25m","Joyce 27m","Joyce 37m","Vanda 63m","Vanda 66m","Vanda 71m","Canada Glacier","Taylor Glacier","Commonwealth Glacier","Diamond Glacier","Utsteinen Nunatak","Miers Glacier","Lower Wright Glacier","Lower Koettlitz Glacier","Upper Koettlitz Glacier","Storglaciaren Glacier","Midtre Lovenbreen Glacier","Greenland Ice Margin Glacier","Greenland Ice Core Glacier","Kangerlussuaq Glacier")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Lake_Bonney_East","Lake_Joyce","Lake_Vanda","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier")
ps_V9_1391f_EukBr_grouped_comp_nmds_melt<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$geo_loc_name)),c("#71c9c1","#ffc385")))

#Ordination
ps_V9_1391f_EukBr_grouped_comp_nmds_ord_weighted<-ordinate(ps_V9_1391f_EukBr_grouped_comp_nmds,"NMDS","bray")
#Stress: 0.1589103
#ANOSIMs
ps_V9_1391f_EukBr_grouped_comp_nmds_site_group=get_variable(ps_V9_1391f_EukBr_grouped_comp_nmds, "env_broad_scale")
ps_V9_1391f_EukBr_grouped_comp_nmds_site_anosim=anosim(distance(ps_V9_1391f_EukBr_grouped_comp_nmds, "bray"), ps_V9_1391f_EukBr_grouped_comp_nmds_site_group)
ps_V9_1391f_EukBr_grouped_comp_nmds_site_anosim
#ANOSIM: Stress = 0.1646433, ANOSIM R-Stat 0.8202, p value = 0.001
#250609: ANOSIM: Stress = 0.122388, ANOSIM R-Stat 0.7351, p value = 0.001
ps_V9_1391f_EukBr_grouped_comp_nmds_loc_group=get_variable(ps_V9_1391f_EukBr_grouped_comp_nmds, "geo_loc_name")
ps_V9_1391f_EukBr_grouped_comp_nmds_loc_anosim=anosim(distance(ps_V9_1391f_EukBr_grouped_comp_nmds, "bray"), ps_V9_1391f_EukBr_grouped_comp_nmds_loc_group)
ps_V9_1391f_EukBr_grouped_comp_nmds_loc_anosim
#ANOSIM: Stress = 0.1646433, ANOSIM R-Stat 0.3808, p value = 0.001
#250609: Stress = 0.122388, ANOSIM R-Stat 0.3566, p value = 0.007


ps_V9_1391f_EukBr_grouped_comp_nmds_dataframe<-as.data.frame(sample_data(ps_V9_1391f_EukBr_grouped_comp_nmds))
ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted<-plot_ordination(ps_V9_1391f_EukBr_grouped_comp_nmds,ps_V9_1391f_EukBr_grouped_comp_nmds_ord_weighted,type="samples",
                                      color="geo_loc_name",label="RepGroup",shape="env_medium")+
  ggtitle("Stress = 0.122388, ANOSIM R-Stat 0.7351, p value = 0.001")+
  scale_colour_manual("Location",values=site_palette)+
  scale_shape_manual("Sample media",values=c(15,16,17))+
  geom_point(size=4,alpha=0.8)+
  geom_text_repel(mapping=aes(x=NMDS1,y=NMDS2,label=RepGroup,fontface="bold"),inherit.aes=F,,size = 3,vjust=0,nudge_y=0.04,max.overlaps=100)+
  #geom_mark_hull(aes(fill=geo_loc_name,colour=geo_loc_name),show.legend=F)+
  expand_limits(x=0.75,y=0.5)+
  theme_mine()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    axis.title.x = element_text(size = 24,face="bold"),
    axis.title.y = element_text(size = 24,face="bold")
  )
ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted$layers
ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted$layers<-ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted$layers[-1]
ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted$layers<-ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted$layers[-1]
ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted
#ggsave("Plots/ps_V9_1391f_EukBr_grouped_comp_nmds_nmds_weighted.svg",width=400,height=250,units=c("mm"))
ggsave("Plots/ps_V9_1391f_EukBr_grouped_comp_nmds_cryo_nmds_weighted.svg",width=400,height=200,units=c("mm"))
```

Tip glom phylogenetic tree

```{r}
ps_V9_1391f_EukBr_grouped_comp<-process_ps_18S(ps_V9_1391f_EukBr_grouped,glom="tip",transformation="comp",remove_na=T)

#Phylogenetic tree
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_grouped_comp)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_grouped_comp)

#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_grouped_comp))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_grouped_comp) <- tax_fixed_mat


otu <- as(otu_table(ps_V9_1391f_EukBr_grouped_comp), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_grouped_comp)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_grouped_comp), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_grouped_comp))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_grouped_comp)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df$SampleID <- rownames(meta)
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel)

rownames(tip_metadata) <- tip_metadata$label

#num_envs<-length(unique(tip_metadata$geo_loc_name))
#site_palette<-unname(createPalette(num_envs,c("#010101","#ffffff")))
site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))

# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=geo_loc_name),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=geo_loc_name),size=4)+
  scale_colour_manual("Location",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_grouped_comp)
#metadata<-sample_data(ps_V9_1391f_EukBr_grouped_comp)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_grouped_comp)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_grouped_comp), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_tree_Family.png",width=400,height=600,units=c("mm"))
```

Tip glom trebouxio tree

```{r}
#Phylogenetic tree
#Subset to relevant group: Trebouxiophyceae
ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae<-subset_taxa(ps_V9_1391f_EukBr_grouped_comp,Class=="Trebouxiophyceae")
#Prune phyloseq object to just Trebouxiophyceae
ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae),ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)

#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae) <- tax_fixed_mat


otu <- as(otu_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae))

#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df$SampleID <- rownames(meta)
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,env_broad_scale)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,env_broad_scale)

rownames(tip_metadata) <- tip_metadata$label



# Step 1: Summarize relative abundance per OTU per site
otu_site_abund <- otu_env %>%
  group_by(OTU, env_broad_scale) %>%
  summarise(rel_abund = sum(Abundance), .groups = "drop")

# Step 2: Pivot to wide format (sites as columns)
otu_site_wide <- otu_site_abund %>%
  pivot_wider(names_from = env_broad_scale, values_from = rel_abund, values_fill = 0)

# Make sure OTU column is named 'label' to match tree tip labels
colnames(otu_site_wide)[1] <- "label"

# Step 3: Join the abundance data to your tree tips (if you want to add more tip metadata, join it here too)
# Assuming your tree object is 'tree'

# Step 4: Plot with pie charts at tips representing relative abundance across sites
#p <- ggtree(tree) %<+% otu_site_wide + 
#  geom_tiplab(size=3) + 
#  geom_fruit(
#    geom=geom_arc_bar,
#    aes(fill=..x..),
#    width=0.1,
#    offset=0.02
#  ) +
#  scale_fill_manual(values = your_site_colors) # set your color palette for sites


#num_envs<-length(unique(tip_metadata$geo_loc_name))
#site_palette<-unname(createPalette(num_envs,c("#010101","#ffffff")))
site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))

your_site_colors<-unname(createPalette(length(unique(sample_data(ps_V9_1391f_EukBr_grouped_comp)$env_broad_scale)),c("#71c9c1","#ffc385")))

tip_metadata$env_broad_scale <- factor(
  tip_metadata$env_broad_scale,
  levels = unique(sample_data(ps_V9_1391f_EukBr_grouped_comp)$env_broad_scale)
)

# Plot
#p<-ggtree(tree)%<+%tip_metadata+
#  geom_tree(size=0.6)+
#  geom_tiplab(aes(label=TipLabel,color=geo_loc_name),size=4,hjust=-0.1,fontface="bold") +
#  geom_tippoint(aes(shape=env_medium,color=geo_loc_name),size=4)+
#  scale_colour_manual("Location",values=site_palette) +
#  scale_shape_manual("Sample media",values=c(15,16,17))+
#  xlim(0,max(tree$edge.length)+0.07)+
#  theme_tree2()+
#  theme(
#    legend.title = element_text(size = 24,face="bold"),
#    legend.text = element_text(size = 18),
#    legend.key.size = unit(1.2, "cm"),
#    legend.position = "right",
#    axis.line.x = element_blank(),
#    axis.ticks.x = element_blank(),
#    axis.text.x = element_blank(),
#    axis.title.x = element_blank()
#  )

#print(p)

# Merge abundance data with existing tip metadata
tip_metadata_full <- left_join(tip_metadata, otu_site_wide, by = "label")

#Pivot long abundance data
otu_site_long <- otu_site_wide %>%
  pivot_longer(
    cols = -label,
    names_to = "variable",
    values_to = "value"
  )

# Already glomerated phyloseq object
otu <- as(otu_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae), "matrix")
if (!taxa_are_rows(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)) {
  otu <- t(otu)
}
meta <- as(sample_data(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae), "data.frame")
meta$SampleID <- rownames(meta)

# Long format
otu_long <- as.data.frame(otu) %>%
  rownames_to_column("label") %>%
  pivot_longer(-label, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0) %>%
  left_join(meta, by = "SampleID")

# Sum abundance per OTU x env_broad_scale
otu_site_long <- otu_long %>%
  group_by(label, env_broad_scale) %>%
  summarise(rel_abund = sum(Abundance), .groups = "drop")

otu_site_long_2 <- otu_site_wide %>%
  pivot_longer(-label, names_to = "env_broad_scale", values_to = "abundance") %>%
  filter(abundance > 0)

# Use ggtreeExtra to build the base tree and add pies from abundance data
pie_data <- otu_site_long_2 %>%
  rename(label = label, fill = env_broad_scale, value = abundance)

# Plot tree with pie charts at tips
p <- ggtree(tree) %<+% tip_metadata +
  geom_tree(size = 0.6) +
  geom_tiplab(aes(label = TipLabel), size = 4, hjust = -0.1, fontface = "bold") +
  xlim(0, max(tree$edge.length) + 0.2) +
  theme_tree2() +
  theme(
    legend.title = element_text(size = 24, face = "bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  ) +
  geom_fruit(
    data = otu_site_long_2,
    geom = geom_arc_bar,
    mapping = aes(x = 1, fill = env_broad_scale, r0 = 0, r = abundance),
    stat = "identity",
    offset = 0.04,
    width = 0.02
  ) +
  scale_fill_manual(values = your_site_colors, name = "Site")

print(p)

#p <- ggtree(tree) +
#  geom_tree(size = 0.6) +
#  geom_fruit(
#    data = otu_site_long,
#    geom = geom_bar,
#    mapping = aes(x = rel_abund, fill = env_broad_scale),
#    stat = "identity",
#    orientation = "y",
#    width = 0.4,
#    offset = 0.02
#  ) +
#  scale_fill_manual(values = site_palette, name = "Site") +
#  theme(legend.position = "right")

#tree<-phy_tree(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_grouped_comp_Trebouxiophyceae_tree_Family_2.png",width=400,height=600,units=c("mm"))
```

Phylogenetic tree of Trebouxiophyceae

```{r}
#Phylogenetic tree
#Subset to relevant group: Trebouxiophyceae
ps_V9_1391f_EukBr_Trebouxiophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Trebouxiophyceae")
#Prune phyloseq object to just Trebouxiophyceae
ps_V9_1391f_EukBr_Trebouxiophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Trebouxiophyceae),ps_V9_1391f_EukBr_Trebouxiophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Trebouxiophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Trebouxiophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Trebouxiophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Trebouxiophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Trebouxiophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Trebouxiophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Trebouxiophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Trebouxiophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Trebouxiophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel)

rownames(tip_metadata) <- tip_metadata$label

#num_envs<-length(unique(tip_metadata$geo_loc_name))
#site_palette<-unname(createPalette(num_envs,c("#010101","#ffffff")))
site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))

# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=geo_loc_name),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=geo_loc_name),size=4)+
  scale_colour_manual("Location",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Trebouxiophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Trebouxiophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Trebouxiophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Trebouxiophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Trebouxiophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Trebouxiophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Trebouxiophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Chrysophyceae tree

```{r}
#Phylogenetic tree
#Subset to relevant group: Chrysophyceae
ps_V9_1391f_EukBr_Chrysophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Chrysophyceae")
#Prune phyloseq object to just Chrysophyceae
ps_V9_1391f_EukBr_Chrysophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Chrysophyceae),ps_V9_1391f_EukBr_Chrysophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Chrysophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Chrysophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Chrysophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Chrysophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Chrysophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Chrysophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Chrysophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Chrysophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Chrysophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Chrysophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Chrysophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Chrysophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Chrysophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Chrysophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Chrysophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Chrysophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Xanthophyceae tree

```{r}
#Phylogenetic tree
#Subset to relevant group: Xanthophyceae
ps_V9_1391f_EukBr_Xanthophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Xanthophyceae")
#Prune phyloseq object to just Xanthophyceae
ps_V9_1391f_EukBr_Xanthophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Xanthophyceae),ps_V9_1391f_EukBr_Xanthophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Xanthophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Xanthophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Xanthophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Xanthophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Xanthophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Xanthophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Xanthophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Xanthophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Xanthophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Xanthophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Xanthophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Xanthophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Xanthophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Xanthophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Xanthophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Xanthophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Phylogenetic tree of Spirotrichea

```{r}
#Phylogenetic tree
#Subset to relevant group: Spirotrichea
ps_V9_1391f_EukBr_Spirotrichea<-subset_taxa(ps_V9_1391f_EukBr,Class=="Spirotrichea")
#Prune phyloseq object to just Spirotrichea
ps_V9_1391f_EukBr_Spirotrichea<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Spirotrichea),ps_V9_1391f_EukBr_Spirotrichea)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Spirotrichea)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Spirotrichea)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Spirotrichea))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Spirotrichea) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Spirotrichea), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Spirotrichea)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Spirotrichea), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Spirotrichea))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Spirotrichea)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Spirotrichea)
#metadata<-sample_data(ps_V9_1391f_EukBr_Spirotrichea)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Spirotrichea)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Spirotrichea), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Spirotrichea_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Spirotrichea_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Spirotrichea_tree_Family.png",width=400,height=250,units=c("mm"))
```

Telonemia_XX

```{r}
#Phylogenetic tree
#Subset to relevant group: Telonemia_XX
ps_V9_1391f_EukBr_Telonemia_XX<-subset_taxa(ps_V9_1391f_EukBr,Class=="Telonemia_XX")
#Prune phyloseq object to just Telonemia_XX
ps_V9_1391f_EukBr_Telonemia_XX<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Telonemia_XX),ps_V9_1391f_EukBr_Telonemia_XX)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Telonemia_XX)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Telonemia_XX)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Telonemia_XX))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Telonemia_XX) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Telonemia_XX), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Telonemia_XX)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Telonemia_XX), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Telonemia_XX))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Telonemia_XX)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Telonemia_XX)
#metadata<-sample_data(ps_V9_1391f_EukBr_Telonemia_XX)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Telonemia_XX)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Telonemia_XX), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Telonemia_XX_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Telonemia_XX_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Telonemia_XX_tree_Family.png",width=400,height=250,units=c("mm"))
```

Mamiellophyceae

```{r}
#Phylogenetic tree
#Subset to relevant group: Mamiellophyceae
ps_V9_1391f_EukBr_Mamiellophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Mamiellophyceae")
#Prune phyloseq object to just Mamiellophyceae
ps_V9_1391f_EukBr_Mamiellophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Mamiellophyceae),ps_V9_1391f_EukBr_Mamiellophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Mamiellophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Mamiellophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Mamiellophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Mamiellophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Mamiellophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Mamiellophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Mamiellophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Mamiellophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Mamiellophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Mamiellophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Mamiellophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Mamiellophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Mamiellophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Mamiellophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Mamiellophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Mamiellophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Filosa-Granofilosea

```{r}
#Phylogenetic tree
#Subset to relevant group: Filosa-Granofilosea
ps_V9_1391f_EukBr_Filosa_Granofilosea<-subset_taxa(ps_V9_1391f_EukBr,Class=="Filosa-Granofilosea")
#Prune phyloseq object to just Filosa-Granofilosea
ps_V9_1391f_EukBr_Filosa_Granofilosea<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Filosa_Granofilosea),ps_V9_1391f_EukBr_Filosa_Granofilosea)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Filosa_Granofilosea)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Filosa_Granofilosea)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Filosa_Granofilosea))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Filosa_Granofilosea) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Filosa_Granofilosea), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Filosa_Granofilosea)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Filosa_Granofilosea), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Filosa_Granofilosea))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Filosa_Granofilosea)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Filosa_Granofilosea)
#metadata<-sample_data(ps_V9_1391f_EukBr_Filosa_Granofilosea)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Filosa_Granofilosea)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Filosa_Granofilosea), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Filosa_Granofilosea_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Filosa_Granofilosea_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Filosa_Granofilosea_tree_Family.png",width=400,height=250,units=c("mm"))
```

Cryptophyceae:nucl

```{r}
#Phylogenetic tree
#Subset to relevant group: Cryptophyceae:nucl
ps_V9_1391f_EukBr_Cryptophyceae_nucl<-subset_taxa(ps_V9_1391f_EukBr,Class=="Cryptophyceae:nucl")
#Prune phyloseq object to just Cryptophyceae:nucl
ps_V9_1391f_EukBr_Cryptophyceae_nucl<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Cryptophyceae_nucl),ps_V9_1391f_EukBr_Cryptophyceae_nucl)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Cryptophyceae_nucl)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Cryptophyceae_nucl)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Cryptophyceae_nucl)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Cryptophyceae_nucl), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Cryptophyceae_nucl)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Cryptophyceae_nucl)
#metadata<-sample_data(ps_V9_1391f_EukBr_Cryptophyceae_nucl)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Cryptophyceae_nucl), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Cryptophyceae_nucl_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Cryptophyceae_nucl_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Cryptophyceae_nucl_tree_Family.png",width=400,height=250,units=c("mm"))
```

Chlorophyceae

```{r}
#Phylogenetic tree
#Subset to relevant group: Chlorophyceae
ps_V9_1391f_EukBr_Chlorophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Chlorophyceae")
#Prune phyloseq object to just Chlorophyceae
ps_V9_1391f_EukBr_Chlorophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Chlorophyceae),ps_V9_1391f_EukBr_Chlorophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Chlorophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Chlorophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Chlorophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Chlorophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Chlorophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Chlorophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Chlorophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Chlorophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Chlorophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Chlorophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Chlorophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Chlorophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Chlorophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Chlorophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Chlorophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Chlorophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Bacillariophyceae

```{r}
#Phylogenetic tree
#Subset to relevant group: Bacillariophyceae
ps_V9_1391f_EukBr_Bacillariophyceae<-subset_taxa(ps_V9_1391f_EukBr,Class=="Bacillariophyceae")
#Prune phyloseq object to just Bacillariophyceae
ps_V9_1391f_EukBr_Bacillariophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Bacillariophyceae),ps_V9_1391f_EukBr_Bacillariophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Bacillariophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Bacillariophyceae)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Bacillariophyceae))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Bacillariophyceae) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Bacillariophyceae), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Bacillariophyceae)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Bacillariophyceae), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Bacillariophyceae))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Bacillariophyceae)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Bacillariophyceae)
#metadata<-sample_data(ps_V9_1391f_EukBr_Bacillariophyceae)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Bacillariophyceae)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Bacillariophyceae), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Bacillariophyceae_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Bacillariophyceae_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Bacillariophyceae_tree_Family.png",width=400,height=250,units=c("mm"))
```

Tardigrada

```{r}
#Phylogenetic tree
#Subset to relevant group: Tardigrada
ps_V9_1391f_EukBr_Tardigrada<-subset_taxa(ps_V9_1391f_EukBr,Class=="Tardigrada")
#Prune phyloseq object to just Tardigrada
ps_V9_1391f_EukBr_Tardigrada<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_Tardigrada),ps_V9_1391f_EukBr_Tardigrada)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_Tardigrada)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_Tardigrada)


#Extract taxonomy table
tax<-as.data.frame(tax_table(ps_V9_1391f_EukBr_Tardigrada))
tax$OTU<-rownames(tax)
unresolved_taxa<-is.na(tax[,"Family"])
#Count number of unresolved asvs
num_unresolved<-sum(unresolved_taxa)
cat("Number of ASVs not resolved to family level:",num_unresolved,"\n")
#Make a copy to edit
tax_fixed<-tax
#Make a new pseudo-class called 'Unresolved', and apply it to higher taxonomic levels
tax_fixed[unresolved_taxa,"Genus"]<-"Unresolved"
tax_fixed[unresolved_taxa,"Family"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Order"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Class"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Subdivision"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Division"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Supergroup"]<-"Unresolved"
#tax_fixed[unresolved_taxa,"Domain"]<-"Unresolved"

# Convert edited taxonomy table back to matrix
tax_fixed_mat <- as.matrix(tax_fixed[, -which(names(tax_fixed) == "OTU")])
rownames(tax_fixed_mat) <- tax_fixed$OTU
# Replace taxonomy table in the phyloseq object
tax_table(ps_V9_1391f_EukBr_Tardigrada) <- tax_fixed_mat



otu <- as(otu_table(ps_V9_1391f_EukBr_Tardigrada), "matrix")

# If OTUs are in columns, transpose to make OTUs the rows
if (!taxa_are_rows(ps_V9_1391f_EukBr_Tardigrada)) {
  otu <- t(otu)
}

# At this point, rows = OTUs/ASVs, columns = Samples
meta <- as(sample_data(ps_V9_1391f_EukBr_Tardigrada), "data.frame")
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_Tardigrada))

#Add fallback logic
# Create a new column "TipLabel" that uses Genus if available, else Family
#tax$Genus[is.na(tax$Genus)] <- NA  # ensure proper NA handling
# You can also treat "Unresolved" as NA if needed
#tax$Genus[tax$Genus == "Unresolved"] <- NA
# Now build the fallback label
#tax$TipLabel <- ifelse(!is.na(tax$Genus), 
#                       as.character(tax$Genus),
#                       ifelse(!is.na(tax$Family), 
#                              paste0("Family: ", tax$Family), 
#                              "Unresolved"))
# Add OTU as a column for joining later
#tax$OTU <- rownames(tax)


#Fallback logic full
# Treat "Unresolved" as NA
tax <- tax %>%
  mutate(across(c(Genus, Family, Order, Class, Division, Supergroup),
                ~na_if(., "Unresolved")))
# Add TipLabel fallback logic
tax <- tax %>%
  mutate(
    TipLabelRaw = coalesce(Species, Genus, Family, Order, Class, Division, Supergroup),
    TipLabel = case_when(
      !is.na(Species) ~ paste0(Species, " (",Family,")"),
      !is.na(Genus) ~ paste0(Genus, " (",Family,")"),
      !is.na(Family) ~ paste0("Family: ", Family),
      !is.na(Order) ~ paste0("Order: ", Order),
      !is.na(Class) ~ paste0("Class: ", Class),
      !is.na(Division) ~ paste0("Division: ", Division),
      !is.na(Supergroup) ~ paste0("Supergroup: ", Supergroup),
      TRUE ~ "Unresolved"
    )
  )
tax$OTU <- rownames(tax)

tree <- phy_tree(ps_V9_1391f_EukBr_Tardigrada)

otu_long <- as.data.frame(otu) %>%
  rownames_to_column("OTU") %>%
  pivot_longer(-OTU, names_to = "SampleID", values_to = "Abundance") %>%
  filter(Abundance > 0)

# Add env_broad_scale to each observation
meta_df <- meta %>% rownames_to_column("SampleID")
otu_env <- left_join(otu_long, meta_df, by = "SampleID")

# Get dominant environment for each OTU
otu_env_summary<-otu_env%>%
  group_by(OTU,geo_loc_name,env_medium,RepGroup)%>%
  summarise(n=n(),.groups="drop")%>%
  group_by(OTU) %>%
  slice_max(n,with_ties=FALSE)

# Add Family info
otu_env_summary$Family<-tax[otu_env_summary$OTU,"Family"]
otu_env_summary$Family[is.na(otu_env_summary$Family)]<-"Unresolved"

# Join fallback TipLabel to the OTU metadata
tip_metadata <- left_join(otu_env_summary, tax %>% select(OTU, TipLabel), by = c("OTU" = "OTU"))

# Create metadata frame for ggtree
tip_metadata<-tip_metadata %>%
  rename(label=OTU) %>%
  select(label,geo_loc_name,env_medium,TipLabel,RepGroup)

rownames(tip_metadata) <- tip_metadata$label

#site_palette<-unname(createPalette(length(unique(tip_metadata$geo_loc_name)),c("#71c9c1","#ffc385")))
site_palette<-unname(createPalette(length(unique(tip_metadata$RepGroup)),c("#71c9c1","#ffc385")))


# Plot
p<-ggtree(tree)%<+%tip_metadata+
  geom_tree(size=0.6)+
  geom_tiplab(aes(label=TipLabel,color=RepGroup),size=4,hjust=-0.1,fontface="bold") +
  geom_tippoint(aes(shape=env_medium,color=RepGroup),size=4)+
  scale_colour_manual("Site",values=site_palette) +
  scale_shape_manual("Sample media",values=c(15,16,17))+
  xlim(0,max(tree$edge.length)+0.07)+
  theme_tree2()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    legend.position = "right",
    axis.line.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.title.x = element_blank()
  )

print(p)

#tree<-phy_tree(ps_V9_1391f_EukBr_Tardigrada)
#metadata<-sample_data(ps_V9_1391f_EukBr_Tardigrada)
#taxa_table<-tax_table(ps_V9_1391f_EukBr_Tardigrada)
#site_data<-data.frame(taxa_table)
#site_data <- metadata$env_broad_scale
#tree$tip.label <- site_data[match(tree$tip.label, rownames(sam_data))]
#site_data$sample_sites <- apply(otu_table(ps_V9_1391f_EukBr_Tardigrada), 1, function(x) paste(names(which(x > 0)), collapse = ","))
#tree$tip.label <- site_data$sample_sites

#p <- ggtree(tree) %<+% metadata +
#     geom_tiplab(aes(color = env_broad_scale), size = 2) +
#     scale_colour_manual("Location",values=site_palette_2)

print(p)

#Save plot
#ggsave("plots/ps_V9_1391f_EukBr_Tardigrada_tree_Family.svg",width=400,height=250,units=c("mm"))
#ggsave("plots/ps_V9_1391f_EukBr_Tardigrada_tree_Family.pdf",width=400,height=250,units=c("mm"))
ggsave("plots/ps_V9_1391f_EukBr_Tardigrada_tree_Family.png",width=400,height=250,units=c("mm"))
```

Trebouxiophyceae NMDS

```{r}
#Subset to relevant group: Trebouxiophyceae
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae<-subset_taxa(ps_V9_1391f_EukBr_grouped,Class=="Trebouxiophyceae")
# Check sample sums
sample_sums <- sample_sums(ps_V9_1391f_EukBr_grouped_comp_nmds)
nonzero_samples <- names(sample_sums[sample_sums > 0])
# Prune to only non-zero samples
ps_V9_1391f_EukBr_grouped_comp_nmds <- prune_samples(nonzero_samples, ps_V9_1391f_EukBr_grouped_comp_nmds)
#Prune phyloseq object to just Trebouxiophyceae
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae<-prune_taxa(taxa_names(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae),ps_V9_1391f_EukBr_grouped_Trebouxiophyceae)
#Check number of taxa
ntaxa(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae)
#Check number of tips
phy_tree(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae)

#NMDS
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds<-microbiome::transform(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae,"compositional")
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_melt<-psmelt(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds)
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_melt<-prune_0(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_melt)
#Reordering
#Reordering
reordering_df<-ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_melt
#reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney_East_18","Bonney_East_22","Joyce_25","Joyce_27","Joyce_37","Vanda_63","Vanda_66","Vanda_71","CAN47","CAN61","CAN64","CAN75","CAN81","CAN87","CAN101","CAN102","CAN111","TAY18","TAY19","TAY29","TAY38","TAY40","TAY42","TAY44","COM7","COM54","COM55","COM57","COM58","COM62","COM65","COM80","COM81","DGC4","Ust4","MVCS3","MVC4","MVC5","MVC6","MVC7","LWC1","LWC2","LWC3","LWC4","LWC5","LKGC1","LKGC2","LKGC3","LKGC4","LKGC5","KSC13","KSC14","KSC16","KSC17","KSC23","KSC33","SX","SY","SZ","SvA","SvB","SvC","SvE","IM1","IM2","IM3","IM4","IC1","IC2","GrC8","GrC11","GrE8")
reordering_df$RepGroup<-fct_relevel(reordering_df$RepGroup,"Bonney East 18m","Bonney East 22m","Joyce 25m","Joyce 27m","Joyce 37m","Vanda 63m","Vanda 66m","Vanda 71m","Canada Glacier","Taylor Glacier","Commonwealth Glacier","Diamond Glacier","Utsteinen Nunatak","Miers Glacier","Lower Wright Glacier","Lower Koettlitz Glacier","Upper Koettlitz Glacier","Storglaciaren Glacier","Midtre Lovenbreen Glacier","Greenland Ice Margin Glacier","Greenland Ice Core Glacier","Kangerlussuaq Glacier")
reordering_df$env_broad_scale<-fct_relevel(reordering_df$env_broad_scale,"Lake_Bonney_East","Lake_Joyce","Lake_Vanda","Canada_glacier","Taylor_glacier","Commonwealth_glacier","Diamond_glacier","Utsteinen_nunatak","Miers_glacier","Lower_Wright_glacier","Lower_Koettlitz_glacier","Upper_Koettlitz_glacier","Storglaciaren","Midtre_Lovenbreen_glacier","Greenland_Ice_margin_glacier","Greenland_Ice_core_glacier","Kangerlussuaq_glacier")
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_melt<-reordering_df

#colour palette
site_palette<-unname(createPalette(length(unique(reordering_df$geo_loc_name)),c("#71c9c1","#ffc385")))

ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds <- prune_samples(
  sample_sums(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds) > 0,
  ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds
)

#Ordination
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_ord_weighted<-ordinate(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds,"NMDS","bray")
#Stress: 0.1589103
#ANOSIMs
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_site_group=get_variable(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds, "env_broad_scale")
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_site_anosim=anosim(distance(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds, "bray"), ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_site_group)
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_site_anosim
#ANOSIM: Stress = 0.1646433, ANOSIM R-Stat 0.8202, p value = 0.001
#250609: ANOSIM: Stress = 0.122388, ANOSIM R-Stat 0.7351, p value = 0.001
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_loc_group=get_variable(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds, "geo_loc_name")
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_loc_anosim=anosim(distance(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds, "bray"), ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_loc_group)
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_loc_anosim
#ANOSIM: Stress = 0.1646433, ANOSIM R-Stat 0.3808, p value = 0.001
#250609: Stress = 0.122388, ANOSIM R-Stat 0.3566, p value = 0.007


ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_dataframe<-as.data.frame(sample_data(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds))
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted<-plot_ordination(ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds,ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_ord_weighted,type="samples",
                                      color="geo_loc_name",label="RepGroup",shape="env_medium")+
  ggtitle("Stress = 0.122388, ANOSIM R-Stat 0.7351, p value = 0.001")+
  scale_colour_manual("Location",values=site_palette)+
  scale_shape_manual("Sample media",values=c(15,16,17))+
  geom_point(size=4,alpha=0.8)+
  geom_text_repel(mapping=aes(x=NMDS1,y=NMDS2,label=RepGroup,fontface="bold"),inherit.aes=F,,size = 3,vjust=0,nudge_y=0.04,max.overlaps=100)+
  #geom_mark_hull(aes(fill=geo_loc_name,colour=geo_loc_name),show.legend=F)+
  expand_limits(x=0.75,y=0.5)+
  theme_mine()+
  theme(
    legend.title = element_text(size = 24,face="bold"),
    legend.text = element_text(size = 18),
    legend.key.size = unit(1.2, "cm"),
    axis.title.x = element_text(size = 24,face="bold"),
    axis.title.y = element_text(size = 24,face="bold")
  )
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted$layers
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted$layers<-ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted$layers[-1]
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted$layers<-ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted$layers[-1]
ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted
#ggsave("Plots/ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_nmds_weighted.svg",width=400,height=250,units=c("mm"))
ggsave("Plots/ps_V9_1391f_EukBr_grouped_Trebouxiophyceae_comp_nmds_cryo_nmds_weighted.svg",width=400,height=200,units=c("mm"))
```

Indicator species

```{r}
#extract otu table
otu <- as.data.frame(otu_table(ps_V9_1391f_EukBr_grouped))
# If OTUs are in rows, transpose to make OTUs the columns
if (taxa_are_rows(ps_V9_1391f_EukBr_grouped)) {
  otu <- t(otu)
}

#extract metadata
meta <- as.data.frame(sample_data(ps_V9_1391f_EukBr_grouped))

#extract taxonomy
tax <- as.data.frame(tax_table(ps_V9_1391f_EukBr_grouped))

#set grouping variable
group<-meta$geo_loc_name
group<-as.factor(group)

#set seed for reproducibility
set.seed(123)
#run indicator analysis with multipatt
indval<-multipatt(otu,group,func="IndVal.g",control=how(nperm=999))

#View results
summary(indval)

#full results table
indval$sign

#add rownames as column for merging
significant_asvs <- indval$sign
significant_asvs$ASV <- rownames(significant_asvs)

#merge with taxonomy
sign_tax <- merge(significant_asvs, tax, by.x = "ASV", by.y = "row.names", all.x = TRUE)

```
